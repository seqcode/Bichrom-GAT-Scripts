/home/spg5958/tmp
Loading seq_onehot_dict.pickle
../output/common_data/onehot_seq_dict
True
Total Epochs = 2
# Number of Epochs
EPOCHS = 2

# batch size
batchsize = 64


# Fraction of data to be used to construct training and test set            
frac = 0.005

# stride for generating onehot_seq_dict & chip-seq hdf5 file
stride = 50

# prediction region length
window_len = 400

# context around prediction region
context_window_len = 10_000

# stride used for chopping genome during training set construction
chop_genome_stride=50

# number of times to oversample chip-seq (positive) regions in training set
num_oversample_chip_seq_peaks = 5

# output path
out_path = "../output"

# input data path
in_path = "../input/raw_data-Ascl1_12hr_real"

# experiment name (directory with this name will be create in out_path
exp_name="experiment_name"

# training data directory name
training_data_dir_name="training_data"

# train out directory name
train_out_dir_name="train_out"

# test results directory path
test_result_dir_name="test_set_performance"

# path to seq_onehot dictionary
seq_onehot_dict_out_path = f"{out_path}/common_data/onehot_seq_dict"

# path to genome sizes file
info = f"{in_path}/mm10_random_removed.info"

# path to genome fasta file
fa = f"{in_path}/mm10.fa"

# path to chip seq hdf5 file
hdf5_chromatin_tracks_out_path = f"{out_path}/common_data/hdf5_Ascl1"


#chromatin_tracks_path = f"{in_path}"

# path to chip seq bigwig file in the list
chromatin_tracks_path_list =[
    f"{in_path}/Ascl1_R1_R2_R3_rep_avg.bw"
]

# path to MultiGPS .event file
peaks = f"{in_path}/multigps_2023-03-30-05-43-08_ES.events"

# path to blacklist regions .bed file
blacklist = f"{in_path}/mm10_blacklist.bed"

# list training chromosomes
training_chrom_list = ["chr1"]

# list of validation chromosomes
val_chroms = ["chr17"]

# list of test chromosomes
test_chroms = ["chr10"]

# path to cool .file
cool_file_path = f"{in_path}/GSE130275_mESC_WT_combined_1.3B_400_normalized.cool"

# resolution of .cool file
resolution = window_len

# model params (note: you may need to modify model parameters inside seq_and_bimodal_networks_ResNet.py)
model_params_dict = {"dense_layers": 3,
                     "n_filters": 240,
                     "filter_size": 20,
                     "pooling_size": 15,
                     "pooling_stride": 10,
                     "dropout": 0.5,
                     "dense_layer_size": 512,
                     "lstm_out": 32,
                     "dilation": 1,
                     "nnodes": (context_window_len+window_len)//resolution,
                     "out_features": 32
                    }

# dataloader threads
data_loader_num_workers = 4



# INTERNAL PARAMETERS (DO NOT NEED TO MODIFY)

# number of 100 bp bins 
nbins = (context_window_len + window_len)//100

exp_path = f"{out_path}/{exp_name}"
data_path = f"{exp_path}/{training_data_dir_name}"
train_out_path = f"{exp_path}/{train_out_dir_name}"
test_out_path = f"{train_out_path}/{test_result_dir_name}"

train_data_paths_seq = {"bed_file_training_df": f"{data_path}/training_df_seq.bed"}
    
train_data_paths_bimodal = {"bed_file_bound_sample_all_df": f"{data_path}/training_df_bimodal_bound.bed",
                            "bed_file_unbound_genome_df": f"{data_path}/training_df_bimodal_unbound.bed"
                           }

val_data_path = f"{data_path}/data_val.bed"
internal_test_data_path = f"{data_path}/test_df_internal.bed"
external_test_data_path = f"{data_path}/test_df_external.bed"

config_file_path = "config.py"


--> train_data_paths_seq = {'bed_file_training_df': '../output/experiment_name/training_data/training_df_seq.bed'}
--> train_data_paths_bimodal = {'bed_file_bound_sample_all_df': '../output/experiment_name/training_data/training_df_bimodal_bound.bed', 'bed_file_unbound_genome_df': '../output/experiment_name/training_data/training_df_bimodal_unbound.bed'}

--> Training seq
DEVICE = cuda
seq_network(
  (conv1): Conv1d(4, 32, kernel_size=(21,), stride=(1,), padding=same)
  (relu1): ReLU()
  (batch_norm1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (maxpool1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (dropout2): Dropout(p=0.5, inplace=False)
  (conv2): Conv1d(32, 64, kernel_size=(3,), stride=(1,), padding=same)
  (relu2): ReLU()
  (batch_norm2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (maxpool2): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (dropout3): Dropout(p=0.5, inplace=False)
  (conv3): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=same)
  (relu3): ReLU()
  (batch_norm3): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (maxpool3): MaxPool1d(kernel_size=5, stride=5, padding=0, dilation=1, ceil_mode=False)
  (dropout4): Dropout(p=0.5, inplace=False)
  (conv4): Conv1d(128, 64, kernel_size=(3,), stride=(1,), padding=same)
  (relu4): ReLU()
  (batch_norm4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (maxpool4): MaxPool1d(kernel_size=5, stride=5, padding=0, dilation=1, ceil_mode=False)
  (dropout_dilation_list): ModuleList(
    (0-5): 6 x Dropout(p=0.5, inplace=False)
  )
  (conv_dilation_list): ModuleList(
    (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=same, dilation=(2,))
    (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=same, dilation=(4,))
    (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=same, dilation=(8,))
    (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=same, dilation=(16,))
    (4): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=same, dilation=(32,))
    (5): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=same, dilation=(64,))
  )
  (relu_dilation_list): ModuleList(
    (0-5): 6 x ReLU()
  )
  (bn_dilation_list): ModuleList(
    (0-5): 6 x BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (chromatin_track_conv_list): ModuleList(
    (0): Conv1d(64, 1, kernel_size=(5,), stride=(1,), padding=same)
  )
  (chromatin_track_activation_list): ModuleList(
    (0): ReLU()
  )
)
training_df_seq
      chrom      start        end        type  label       id
0      chr1   73002550   73002950  neg_genome      0  1530687
1      chr1  134593500  134593900  neg_genome      0  2758003
2      chr1  115139150  115139550  neg_genome      0  2370715
3      chr1   58217250   58217650  neg_genome      0  1236007
4      chr1  183208750  183209150  neg_genome      0  3726728
...     ...        ...        ...         ...    ...      ...
19820  chr1     336750     337150  neg_genome      0    80793
19821  chr1   38855050   38855450  neg_genome      0   849501
19822  chr1  187350350  187350750  neg_genome      0  3809267
19823  chr1   57005200   57005600  neg_genome      0  1211814
19824  chr1   35650700   35651100  neg_genome      0   785945

[19825 rows x 6 columns]
(19825, 6)
      chrom      start        end  label       id
0      chr1   72997550   73007950      0  1530687
1      chr1  134588500  134598900      0  2758003
2      chr1  115134150  115144550      0  2370715
3      chr1   58212250   58222650      0  1236007
4      chr1  183203750  183214150      0  3726728
...     ...        ...        ...    ...      ...
19820  chr1     331750     342150      0    80793
19821  chr1   38850050   38860450      0   849501
19822  chr1  187345350  187355750      0  3809267
19823  chr1   57000200   57010600      0  1211814
19824  chr1   35645700   35656100      0   785945

[19823 rows x 5 columns]
(19823, 5)
label
0    19457
1      366
Name: count, dtype: int64
  train_dataset = 19823

EPOCH 0/1
  Training (seq):

  #### Num of Batches ####
  New chopped_genome_dataset_loader = 310

/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/site-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([64, 104])) that is different to the input size (torch.Size([])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.2295 0.0 2.7212 0.7098
true 0.7919 0.0 4.375 1.5352
  batch 1 batch_avg_loss: 0.7939221858978271
  batch 1 loss: 0.7939221858978271
  batch 1 loss_avg: 0.35993891954421997
  batch 1 loss_zero: 0.9870873093605042
  batch 1 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.6412 0.0 4.1136 1.6134
true 0.8239 0.0 5.043 1.563
  batch 2 batch_avg_loss: 0.8279671669006348
  batch 2 loss: 0.8620121479034424
  batch 2 loss_avg: 0.39574676752090454
  batch 2 loss_zero: 1.0745468139648438
  batch 2 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.3172 0.0 2.6344 0.9236
true 0.7485 0.0 5.4766 1.5034
  batch 3 batch_avg_loss: 0.7918205062548319
  batch 3 loss: 0.7195271849632263
  batch 3 loss_avg: 0.36773550510406494
  batch 3 loss_zero: 0.9279287457466125
  batch 3 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.2947 0.0 2.1506 0.634
true 0.7351 0.0 4.5781 1.4512
  batch 4 batch_avg_loss: 0.7349044233560562
  batch 4 loss: 0.564156174659729
  batch 4 loss_avg: 0.3411863446235657
  batch 4 loss_zero: 0.8816016316413879
  batch 4 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6276 0.0 2.9428 1.5364
true 0.7933 0.0 6.0273 1.5146
  batch 5 batch_avg_loss: 0.7647724509239197
  batch 5 loss: 0.8842445611953735
  batch 5 loss_avg: 0.3748840093612671
  batch 5 loss_zero: 1.0042104721069336
  batch 5 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.5275 0.0 2.0286 0.987
true 0.7645 0.0 4.6016 1.4473
  batch 6 batch_avg_loss: 0.7176507413387299
  batch 6 loss: 0.48204219341278076
  batch 6 loss_avg: 0.2894763648509979
  batch 6 loss_zero: 0.8739740252494812
  batch 6 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.4619 0.0 1.8907 0.9029
true 0.87 0.0 7.9219 1.6401
  batch 7 batch_avg_loss: 0.7343599200248718
  batch 7 loss: 0.8346149921417236
  batch 7 loss_avg: 0.5597575902938843
  batch 7 loss_zero: 1.3166465759277344
  batch 7 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.565 0.0 1.8906 1.1613
true 0.77 0.0 4.7266 1.499
  batch 8 batch_avg_loss: 0.7081337198615074
  batch 8 loss: 0.5245503187179565
  batch 8 loss_avg: 0.3301263451576233
  batch 8 loss_zero: 0.9230532050132751
  batch 8 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7155 0.0 2.3341 1.3982
true 0.7998 0.0 5.6758 1.5356
  batch 9 batch_avg_loss: 0.692339128918118
  batch 9 loss: 0.5659824013710022
  batch 9 loss_avg: 0.33458659052848816
  batch 9 loss_zero: 0.9743219614028931
  batch 9 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7474 0.0 2.0455 1.2998
true 0.7992 0.0 4.7578 1.4956
  batch 10 batch_avg_loss: 0.6752870261669159
  batch 10 loss: 0.5218181014060974
  batch 10 loss_avg: 0.3390689790248871
  batch 10 loss_zero: 0.9777830839157104
  batch 10 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7483 0.0 1.5974 1.0637
true 0.7683 0.0 5.1484 1.4707
  batch 11 batch_avg_loss: 0.646257839419625
  batch 11 loss: 0.3559659719467163
  batch 11 loss_avg: 0.33439117670059204
  batch 11 loss_zero: 0.9246474504470825
  batch 11 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.6433 0.0 2.1759 1.0171
true 0.743 0.0 4.3047 1.4321
  batch 12 batch_avg_loss: 0.625400647521019
  batch 12 loss: 0.39597153663635254
  batch 12 loss_avg: 0.291022926568985
  batch 12 loss_zero: 0.8430135250091553
  batch 12 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.6439 0.0 2.0142 0.941
true 0.7353 0.0 6.3672 1.4565
  batch 13 batch_avg_loss: 0.6113976882054255
  batch 13 loss: 0.44336217641830444
  batch 13 loss_avg: 0.3722355365753174
  batch 13 loss_zero: 0.9128987789154053
  batch 13 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7462 0.0 1.7258 1.0742
true 0.7927 0.0 7.0781 1.4927
  batch 14 batch_avg_loss: 0.5956262456519263
  batch 14 loss: 0.39059749245643616
  batch 14 loss_avg: 0.33519622683525085
  batch 14 loss_zero: 0.9635263681411743
  batch 14 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8913 0.0 1.8574 1.2457
true 0.8094 0.0 4.5391 1.5918
  batch 15 batch_avg_loss: 0.582850581407547
  batch 15 loss: 0.4039912819862366
  batch 15 loss_avg: 0.3690081536769867
  batch 15 loss_zero: 1.0241644382476807
  batch 15 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8291 0.0 1.6927 1.1541
true 0.845 0.0 6.0938 1.5718
  batch 16 batch_avg_loss: 0.5723943170160055
  batch 16 loss: 0.4155503511428833
  batch 16 loss_avg: 0.36582133173942566
  batch 16 loss_zero: 1.0797910690307617
  batch 16 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.777 0.0 1.3112 0.9796
true 0.7518 0.0 4.9141 1.4702
  batch 17 batch_avg_loss: 0.55891433708808
  batch 17 loss: 0.343234658241272
  batch 17 loss_avg: 0.3402423858642578
  batch 17 loss_zero: 0.9054854512214661
  batch 17 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.5767 0.0 1.3775 0.8675
true 0.8398 0.0 6.418 1.5889
  batch 18 batch_avg_loss: 0.5567035956515206
  batch 18 loss: 0.519120991230011
  batch 18 loss_avg: 0.41555288434028625
  batch 18 loss_zero: 1.120851755142212
  batch 18 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6735 0.0 1.3981 0.9355
true 0.8702 0.0 5.8672 1.5684
  batch 19 batch_avg_loss: 0.5491538612466109
  batch 19 loss: 0.4132586419582367
  batch 19 loss_avg: 0.3520609438419342
  batch 19 loss_zero: 1.1093796491622925
  batch 19 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.9167 0.0 1.8137 1.2187
true 0.7702 0.0 9.625 1.4463
  batch 20 batch_avg_loss: 0.5436237663030624
  batch 20 loss: 0.43855196237564087
  batch 20 loss_avg: 0.3890721797943115
  batch 20 loss_zero: 0.9822408556938171
  batch 20 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.9736 0.0 1.9827 1.2601
true 0.8029 0.0 5.5039 1.5186
  batch 21 batch_avg_loss: 0.5365767847924006
  batch 21 loss: 0.3956371545791626
  batch 21 loss_avg: 0.34790489077568054
  batch 21 loss_zero: 0.9926154613494873
  batch 21 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8297 0.0 1.7255 1.1241
true 0.7882 0.0 5.6172 1.5137
  batch 22 batch_avg_loss: 0.5288400907408107
  batch 22 loss: 0.3663695156574249
  batch 22 loss_avg: 0.3502643406391144
  batch 22 loss_zero: 0.9715484380722046
  batch 22 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6611 0.0 1.2796 0.8615
true 0.822 0.0 5.6875 1.5713
  batch 23 batch_avg_loss: 0.5251717826594478
  batch 23 loss: 0.44446900486946106
  batch 23 loss_avg: 0.41556474566459656
  batch 23 loss_zero: 1.0911781787872314
  batch 23 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.646 0.0 1.2155 0.8338
true 0.7882 0.0 8.6562 1.4966
  batch 24 batch_avg_loss: 0.519016961256663
  batch 24 loss: 0.37745606899261475
  batch 24 loss_avg: 0.3594485819339752
  batch 24 loss_zero: 0.9807816743850708
  batch 24 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7595 0.0 1.3543 0.9717
true 0.7932 0.0 3.9961 1.522
  batch 25 batch_avg_loss: 0.5112026786804199
  batch 25 loss: 0.32365989685058594
  batch 25 loss_avg: 0.3177858591079712
  batch 25 loss_zero: 0.9468929171562195
  batch 25 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8423 0.0 1.5003 1.1409
true 0.799 0.0 5.5234 1.5098
  batch 26 batch_avg_loss: 0.5059587623064334
  batch 26 loss: 0.37486085295677185
  batch 26 loss_avg: 0.3419298231601715
  batch 26 loss_zero: 0.9804028868675232
  batch 26 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8777 0.0 1.4316 1.0886
true 0.7449 0.0 4.4531 1.481
  batch 27 batch_avg_loss: 0.5000155027265902
  batch 27 loss: 0.3454907536506653
  batch 27 loss_avg: 0.3278815448284149
  batch 27 loss_zero: 0.8828240036964417
  batch 27 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7389 0.0 1.1219 0.8958
true 0.7885 0.0 6.9609 1.522
  batch 28 batch_avg_loss: 0.4956581411617143
  batch 28 loss: 0.3780093789100647
  batch 28 loss_avg: 0.39861083030700684
  batch 28 loss_zero: 1.0203349590301514
  batch 28 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6538 0.0 1.2891 0.8154
true 0.8298 0.0 5.9219 1.5352
  batch 29 batch_avg_loss: 0.4906870609727399
  batch 29 loss: 0.3514968156814575
  batch 29 loss_avg: 0.32233884930610657
  batch 29 loss_zero: 1.0108840465545654
  batch 29 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7592 0.0 1.3618 0.976
true 0.8001 0.0 7.2031 1.4922
  batch 30 batch_avg_loss: 0.486530672510465
  batch 30 loss: 0.3659954071044922
  batch 30 loss_avg: 0.37281522154808044
  batch 30 loss_zero: 1.0130366086959839
  batch 30 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8812 0.0 1.6016 1.1743
true 0.7205 0.0 8.1875 1.4375
  batch 31 batch_avg_loss: 0.4844376963953818
  batch 31 loss: 0.42164841294288635
  batch 31 loss_avg: 0.3824072778224945
  batch 31 loss_zero: 0.9014888405799866
  batch 31 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8091 0.0 1.4785 1.0492
true 0.7868 0.0 4.2422 1.4961
  batch 32 batch_avg_loss: 0.4784872820600867
  batch 32 loss: 0.29402443766593933
  batch 32 loss_avg: 0.2900750935077667
  batch 32 loss_zero: 0.9091524481773376
  batch 32 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7079 0.0 1.3427 0.9161
true 0.8071 0.0 7.25 1.5132
  batch 33 batch_avg_loss: 0.4757972684773532
  batch 33 loss: 0.38971683382987976
  batch 33 loss_avg: 0.38108640909194946
  batch 33 loss_zero: 1.0324558019638062
  batch 33 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.699 0.0 1.2185 0.8455
true 0.7311 0.0 3.5586 1.4229
  batch 34 batch_avg_loss: 0.4701326655990937
  batch 34 loss: 0.28320077061653137
  batch 34 loss_avg: 0.2779248058795929
  batch 34 loss_zero: 0.8124185800552368
  batch 34 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7302 0.0 1.1839 0.8653
true 0.7959 0.0 5.6719 1.5464
  batch 35 batch_avg_loss: 0.46708314078194757
  batch 35 loss: 0.36339929699897766
  batch 35 loss_avg: 0.3703528344631195
  batch 35 loss_zero: 1.0038565397262573
  batch 35 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8562 0.0 1.2826 1.0648
true 0.7936 0.0 7.7656 1.4883
  batch 36 batch_avg_loss: 0.46423597551054424
  batch 36 loss: 0.36458519101142883
  batch 36 loss_avg: 0.35863181948661804
  batch 36 loss_zero: 0.9884408712387085
  batch 36 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.9698 0.0 1.3989 1.1639
true 0.7658 0.0 5.2812 1.543
  batch 37 batch_avg_loss: 0.46173991061545705
  batch 37 loss: 0.3718815743923187
  batch 37 loss_avg: 0.36725497245788574
  batch 37 loss_zero: 0.9537632465362549
  batch 37 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8232 0.0 1.3783 1.0668
true 0.7762 0.0 6.9922 1.5381
  batch 38 batch_avg_loss: 0.4585714653918618
  batch 38 loss: 0.34133899211883545
  batch 38 loss_avg: 0.3786107301712036
  batch 38 loss_zero: 0.9810694456100464
  batch 38 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6238 0.0 1.2988 0.9194
true 0.7945 0.0 5.6172 1.5127
  batch 39 batch_avg_loss: 0.45650429221299976
  batch 39 loss: 0.3779517114162445
  batch 39 loss_avg: 0.36093056201934814
  batch 39 loss_zero: 0.9921973943710327
  batch 39 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6259 0.0 1.288 0.9078
true 0.7853 0.0 6.7461 1.5254
  batch 40 batch_avg_loss: 0.45470684543251993
  batch 40 loss: 0.38460642099380493
  batch 40 loss_avg: 0.39312484860420227
  batch 40 loss_zero: 1.0098131895065308
  batch 40 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6661 0.0 1.5857 1.0931
true 0.797 0.0 4.1406 1.5273
  batch 41 batch_avg_loss: 0.45211830735206604
  batch 41 loss: 0.34857678413391113
  batch 41 loss_avg: 0.31265348196029663
  batch 41 loss_zero: 0.9478757381439209
  batch 41 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8574 0.0 1.6802 1.2232
true 0.7528 0.0 6.7461 1.4565
  batch 42 batch_avg_loss: 0.44992405530952273
  batch 42 loss: 0.3599597215652466
  batch 42 loss_avg: 0.35263627767562866
  batch 42 loss_zero: 0.9192882180213928
  batch 42 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.8733 0.0 1.5258 1.1993
true 0.7652 0.0 4.5938 1.4507
  batch 43 batch_avg_loss: 0.44680316850196483
  batch 43 loss: 0.3157259225845337
  batch 43 loss_avg: 0.30242252349853516
  batch 43 loss_zero: 0.8879600167274475
  batch 43 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7722 0.0 1.2077 0.9857
true 0.7496 0.0 5.4453 1.4526
  batch 44 batch_avg_loss: 0.44341321831399744
  batch 44 loss: 0.29764536023139954
  batch 44 loss_avg: 0.30917197465896606
  batch 44 loss_zero: 0.8710086941719055
  batch 44 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6699 0.0 0.9733 0.8175
true 0.802 0.0 7.3867 1.5649
  batch 45 batch_avg_loss: 0.44316278563605416
  batch 45 loss: 0.4321437478065491
  batch 45 loss_avg: 0.45015379786491394
  batch 45 loss_zero: 1.0933303833007812
  batch 45 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6833 0.0 0.9936 0.8222
true 0.7483 0.0 4.5938 1.4648
  batch 46 batch_avg_loss: 0.4403158523466276
  batch 46 loss: 0.31220385432243347
  batch 46 loss_avg: 0.32020360231399536
  batch 46 loss_zero: 0.8801809549331665
  batch 46 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7365 0.0 1.0722 0.8841
true 0.7555 0.0 5.5312 1.5142
  batch 47 batch_avg_loss: 0.4384251877348474
  batch 47 loss: 0.35145461559295654
  batch 47 loss_avg: 0.3660596013069153
  batch 47 loss_zero: 0.9367921352386475
  batch 47 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8053 0.0 1.2846 0.9952
true 0.8138 0.0 7.3867 1.5488
  batch 48 batch_avg_loss: 0.43658366861442727
  batch 48 loss: 0.3500322699546814
  batch 48 loss_avg: 0.38398846983909607
  batch 48 loss_zero: 1.0462599992752075
  batch 48 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.87 0.0 1.4957 1.112
true 0.7896 0.0 5.2656 1.4814
  batch 49 batch_avg_loss: 0.4341736709584995
  batch 49 loss: 0.3184937834739685
  batch 49 loss_avg: 0.3219294548034668
  batch 49 loss_zero: 0.9454734921455383
  batch 49 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8619 0.0 1.6575 1.149
true 0.8084 0.0 7.7188 1.5425
  batch 50 batch_avg_loss: 0.4335017830133438
  batch 50 loss: 0.4005792737007141
  batch 50 loss_avg: 0.4102518558502197
  batch 50 loss_zero: 1.0637391805648804
  batch 50 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8175 0.0 1.5667 1.1031
true 0.7914 0.0 4.8438 1.5024
  batch 51 batch_avg_loss: 0.43122437946936665
  batch 51 loss: 0.3173542022705078
  batch 51 loss_avg: 0.3330833613872528
  batch 51 loss_zero: 0.9593671560287476
  batch 51 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.747 0.0 1.4386 1.0286
true 0.8355 0.0 4.1797 1.5469
  batch 52 batch_avg_loss: 0.42869633436203003
  batch 52 loss: 0.29976603388786316
  batch 52 loss_avg: 0.3242799937725067
  batch 52 loss_zero: 1.0224189758300781
  batch 52 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7389 0.0 1.4041 0.9677
true 0.7952 0.0 4.7188 1.5063
  batch 53 batch_avg_loss: 0.426246685239504
  batch 53 loss: 0.2988649308681488
  batch 53 loss_avg: 0.3122381269931793
  batch 53 loss_zero: 0.9446209073066711
  batch 53 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7616 0.0 1.5326 1.0102
true 0.7663 0.0 3.3398 1.4707
  batch 54 batch_avg_loss: 0.4232352309756809
  batch 54 loss: 0.26362815499305725
  batch 54 loss_avg: 0.2905563414096832
  batch 54 loss_zero: 0.8777279853820801
  batch 54 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7851 0.0 1.4461 1.0489
true 0.7407 0.0 4.2266 1.4883
  batch 55 batch_avg_loss: 0.4205298808487979
  batch 55 loss: 0.2744409739971161
  batch 55 loss_avg: 0.31877756118774414
  batch 55 loss_zero: 0.867417573928833
  batch 55 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.785 0.0 1.5132 1.0407
true 0.773 0.0 3.9258 1.5146
  batch 56 batch_avg_loss: 0.4182037205568382
  batch 56 loss: 0.29026490449905396
  batch 56 loss_avg: 0.3185960352420807
  batch 56 loss_zero: 0.9162021279335022
  batch 56 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7745 0.0 1.3878 1.0377
true 0.757 0.0 6.5781 1.4878
  batch 57 batch_avg_loss: 0.4167274665414241
  batch 57 loss: 0.3340572416782379
  batch 57 loss_avg: 0.36525747179985046
  batch 57 loss_zero: 0.9382904171943665
  batch 57 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7594 0.0 1.2446 0.9744
true 0.7341 0.0 3.2891 1.4512
  batch 58 batch_avg_loss: 0.4140820559756509
  batch 58 loss: 0.26329365372657776
  batch 58 loss_avg: 0.30256518721580505
  batch 58 loss_zero: 0.8414669632911682
  batch 58 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7174 0.0 1.1947 0.9505
true 0.8082 0.0 4.9922 1.5117
  batch 59 batch_avg_loss: 0.41234045362068433
  batch 59 loss: 0.3113275170326233
  batch 59 loss_avg: 0.32883840799331665
  batch 59 loss_zero: 0.9820433259010315
  batch 59 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7405 0.0 1.3371 0.9767
true 0.8208 0.0 4.4492 1.5659
  batch 60 batch_avg_loss: 0.41060926963885624
  batch 60 loss: 0.30846941471099854
  batch 60 loss_avg: 0.32783427834510803
  batch 60 loss_zero: 1.0016071796417236
  batch 60 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.825 0.0 1.3708 1.041
true 0.7718 0.0 4.4688 1.5332
  batch 61 batch_avg_loss: 0.4094113497460475
  batch 61 loss: 0.33753615617752075
  batch 61 loss_avg: 0.36377087235450745
  batch 61 loss_zero: 0.9594446420669556
  batch 61 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8347 0.0 1.4238 1.1119
true 0.7073 0.0 5.2031 1.4155
  batch 62 batch_avg_loss: 0.40751677463131564
  batch 62 loss: 0.29194769263267517
  batch 62 loss_avg: 0.30067387223243713
  batch 62 loss_zero: 0.8008875250816345
  batch 62 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7592 0.0 1.233 0.998
true 0.7665 0.0 7.7656 1.4971
  batch 63 batch_avg_loss: 0.4059537947177887
  batch 63 loss: 0.3090490400791168
  batch 63 loss_avg: 0.3604670464992523
  batch 63 loss_zero: 0.947973370552063
  batch 63 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6908 0.0 1.2938 0.9473
true 0.7865 0.0 7.25 1.5063
  batch 64 batch_avg_loss: 0.40558455092832446
  batch 64 loss: 0.38232219219207764
  batch 64 loss_avg: 0.4375540018081665
  batch 64 loss_zero: 1.0561155080795288
  batch 64 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6922 0.0 1.328 0.9999
true 0.7938 0.0 6.3438 1.5078
  batch 65 batch_avg_loss: 0.404268969480808
  batch 65 loss: 0.3200717568397522
  batch 65 loss_avg: 0.3356897532939911
  batch 65 loss_zero: 0.9658012986183167
  batch 65 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7597 0.0 1.5269 1.0951
true 0.7099 0.0 6.7578 1.4551
  batch 66 batch_avg_loss: 0.40280680403564917
  batch 66 loss: 0.30776605010032654
  batch 66 loss_avg: 0.3436930477619171
  batch 66 loss_zero: 0.8476911783218384
  batch 66 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7649 0.0 1.6886 1.1557
true 0.7427 0.0 5.3281 1.4502
  batch 67 batch_avg_loss: 0.4010576610244922
  batch 67 loss: 0.2856142222881317
  batch 67 loss_avg: 0.3204862177371979
  batch 67 loss_zero: 0.8720270395278931
  batch 67 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7489 0.0 1.4777 1.049
true 0.8138 0.0 6.1328 1.5283
  batch 68 batch_avg_loss: 0.39963458916720224
  batch 68 loss: 0.304288774728775
  batch 68 loss_avg: 0.33739444613456726
  batch 68 loss_zero: 0.9996492266654968
  batch 68 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7687 0.0 1.4759 1.0076
true 0.7335 0.0 5.082 1.4766
  batch 69 batch_avg_loss: 0.39830088960951654
  batch 69 loss: 0.30760931968688965
  batch 69 loss_avg: 0.34008482098579407
  batch 69 loss_zero: 0.8781751990318298
  batch 69 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7667 0.0 1.2609 0.9631
true 0.6997 0.0 5.0 1.459
  batch 70 batch_avg_loss: 0.3967197154249464
  batch 70 loss: 0.2876186966896057
  batch 70 loss_avg: 0.3303111493587494
  batch 70 loss_zero: 0.819828450679779
  batch 70 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7411 0.0 1.2 0.923
true 0.7489 0.0 4.5703 1.479
  batch 71 batch_avg_loss: 0.3953380588914307
  batch 71 loss: 0.29862210154533386
  batch 71 loss_avg: 0.33076220750808716
  batch 71 loss_zero: 0.8916054368019104
  batch 71 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7279 0.0 1.2108 0.9069
true 0.8178 0.0 6.3047 1.5386
  batch 72 batch_avg_loss: 0.3943070036669572
  batch 72 loss: 0.3211020827293396
  batch 72 loss_avg: 0.353312611579895
  batch 72 loss_zero: 1.0221072435379028
  batch 72 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7709 0.0 1.2183 0.9927
true 0.7791 0.0 4.6172 1.4702
  batch 73 batch_avg_loss: 0.3928552420988475
  batch 73 loss: 0.2883284091949463
  batch 73 loss_avg: 0.3098124861717224
  batch 73 loss_zero: 0.9167851805686951
  batch 73 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8074 0.0 1.4329 1.0537
true 0.7952 0.0 5.6172 1.5376
  batch 74 batch_avg_loss: 0.39203055645968465
  batch 74 loss: 0.3318285048007965
  batch 74 loss_avg: 0.360694944858551
  batch 74 loss_zero: 0.9931012392044067
  batch 74 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.835 0.0 1.3537 1.0603
true 0.8045 0.0 5.8125 1.5488
  batch 75 batch_avg_loss: 0.39085303982098896
  batch 75 loss: 0.3037168085575104
  batch 75 loss_avg: 0.3674754798412323
  batch 75 loss_zero: 1.0147018432617188
  batch 75 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.8242 0.0 1.5411 1.1015
true 0.7506 0.0 4.9219 1.4629
  batch 76 batch_avg_loss: 0.3896448110279284
  batch 76 loss: 0.2990276515483856
  batch 76 loss_avg: 0.31422367691993713
  batch 76 loss_zero: 0.8776295185089111
  batch 76 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7678 0.0 1.3916 1.0159
true 0.7813 0.0 4.6328 1.4727
  batch 77 batch_avg_loss: 0.3883808320992953
  batch 77 loss: 0.2923184335231781
  batch 77 loss_avg: 0.3146291673183441
  batch 77 loss_zero: 0.9250234961509705
  batch 77 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7084 0.0 1.307 0.9631
true 0.7307 0.0 4.7539 1.4731
  batch 78 batch_avg_loss: 0.38707463175822526
  batch 78 loss: 0.28649720549583435
  batch 78 loss_avg: 0.3487949073314667
  batch 78 loss_zero: 0.8827306628227234
  batch 78 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6818 0.0 1.3402 0.9324
true 0.7776 0.0 4.8047 1.5078
  batch 79 batch_avg_loss: 0.3860009448437751
  batch 79 loss: 0.3022533655166626
  batch 79 loss_avg: 0.3424108326435089
  batch 79 loss_zero: 0.9470261931419373
  batch 79 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7128 0.0 1.471 1.0046
true 0.8002 0.0 4.0781 1.4937
  batch 80 batch_avg_loss: 0.3847976990044117
  batch 80 loss: 0.28974127769470215
  batch 80 loss_avg: 0.28963595628738403
  batch 80 loss_zero: 0.9300113320350647
  batch 80 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7787 0.0 1.6923 1.0697
true 0.7436 0.0 7.1797 1.4668
  batch 81 batch_avg_loss: 0.38388342327541775
  batch 81 loss: 0.3107413649559021
  batch 81 loss_avg: 0.3287751376628876
  batch 81 loss_zero: 0.881741464138031
  batch 81 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8081 0.0 1.4 1.0854
true 0.8099 0.0 6.6133 1.5396
  batch 82 batch_avg_loss: 0.3827905651272797
  batch 82 loss: 0.29426905512809753
  batch 82 loss_avg: 0.3564564883708954
  batch 82 loss_zero: 1.012338399887085
  batch 82 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8427 0.0 1.5257 1.1336
true 0.7838 0.0 5.3203 1.4829
  batch 83 batch_avg_loss: 0.381417456161545
  batch 83 loss: 0.2688225209712982
  batch 83 loss_avg: 0.29895177483558655
  batch 83 loss_zero: 0.9133229851722717
  batch 83 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8339 0.0 1.4163 1.0916
true 0.7909 0.0 4.9844 1.5303
  batch 84 batch_avg_loss: 0.38043586093754994
  batch 84 loss: 0.2989634573459625
  batch 84 loss_avg: 0.3523898124694824
  batch 84 loss_zero: 0.9779318571090698
  batch 84 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8053 0.0 1.3285 1.0358
true 0.7885 0.0 3.959 1.4531
  batch 85 batch_avg_loss: 0.37891050682348365
  batch 85 loss: 0.25078076124191284
  batch 85 loss_avg: 0.26168152689933777
  batch 85 loss_zero: 0.8834899067878723
  batch 85 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7611 0.0 1.2281 0.9662
true 0.7734 0.0 3.9688 1.4517
  batch 86 batch_avg_loss: 0.3775358806515849
  batch 86 loss: 0.26069265604019165
  batch 86 loss_avg: 0.28516751527786255
  batch 86 loss_zero: 0.8833768367767334
  batch 86 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7272 0.0 1.1334 0.8784
true 0.8503 0.0 4.9141 1.5371
  batch 87 batch_avg_loss: 0.3769004673793398
  batch 87 loss: 0.3222549259662628
  batch 87 loss_avg: 0.3225484788417816
  batch 87 loss_zero: 1.04563570022583
  batch 87 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7618 0.0 1.2323 0.937
true 0.8163 0.0 6.1484 1.5654
  batch 88 batch_avg_loss: 0.3766864971681075
  batch 88 loss: 0.35807108879089355
  batch 88 loss_avg: 0.4020075500011444
  batch 88 loss_zero: 1.06839919090271
  batch 88 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8353 0.0 1.3247 1.0298
true 0.7736 0.0 4.3281 1.4707
  batch 89 batch_avg_loss: 0.37566118729248477
  batch 89 loss: 0.28543391823768616
  batch 89 loss_avg: 0.30909988284111023
  batch 89 loss_zero: 0.9075044989585876
  batch 89 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8662 0.0 1.447 1.1057
true 0.7172 0.0 5.2188 1.4263
  batch 90 batch_avg_loss: 0.3747548003991445
  batch 90 loss: 0.29408636689186096
  batch 90 loss_avg: 0.3058009147644043
  batch 90 loss_zero: 0.8202207684516907
  batch 90 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8054 0.0 1.3775 1.0174
true 0.7711 0.0 5.3242 1.4473
  batch 91 batch_avg_loss: 0.37364518642425537
  batch 91 loss: 0.2737799286842346
  batch 91 loss_avg: 0.2945457398891449
  batch 91 loss_zero: 0.889076828956604
  batch 91 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7328 0.0 1.3674 0.9791
true 0.7545 0.0 9.625 1.4795
  batch 92 batch_avg_loss: 0.37321388786253723
  batch 92 loss: 0.3339657187461853
  batch 92 loss_avg: 0.3829256296157837
  batch 92 loss_zero: 0.9522586464881897
  batch 92 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6906 0.0 1.3823 0.9329
true 0.749 0.0 4.6875 1.4678
  batch 93 batch_avg_loss: 0.37222222038494646
  batch 93 loss: 0.28098881244659424
  batch 93 loss_avg: 0.3328673839569092
  batch 93 loss_zero: 0.8938155770301819
  batch 93 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6941 0.0 1.4403 0.9598
true 0.7525 0.0 5.7578 1.4937
  batch 94 batch_avg_loss: 0.37158560182185885
  batch 94 loss: 0.3123800754547119
  batch 94 loss_avg: 0.3666163682937622
  batch 94 loss_zero: 0.9328050017356873
  batch 94 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7261 0.0 1.6323 1.0801
true 0.7012 0.0 5.7812 1.4248
  batch 95 batch_avg_loss: 0.3708586670850453
  batch 95 loss: 0.3025268018245697
  batch 95 loss_avg: 0.3425028920173645
  batch 95 loss_zero: 0.8341608643531799
  batch 95 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7463 0.0 1.4936 1.0622
true 0.6965 0.0 4.4492 1.4316
  batch 96 batch_avg_loss: 0.3697293509418766
  batch 96 loss: 0.26244431734085083
  batch 96 loss_avg: 0.3201308846473694
  batch 96 loss_zero: 0.8052397966384888
  batch 96 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7067 0.0 1.4161 1.0557
true 0.7594 0.0 4.5508 1.4883
  batch 97 batch_avg_loss: 0.36902871359254896
  batch 97 loss: 0.3017675280570984
  batch 97 loss_avg: 0.33074408769607544
  batch 97 loss_zero: 0.9074625372886658
  batch 97 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6991 0.0 1.3225 1.0278
true 0.7892 0.0 4.9141 1.4922
  batch 98 batch_avg_loss: 0.36819852888584137
  batch 98 loss: 0.2876706123352051
  batch 98 loss_avg: 0.3074868321418762
  batch 98 loss_zero: 0.9303747415542603
  batch 98 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.707 0.0 1.3599 0.9895
true 0.7883 0.0 4.3672 1.4941
  batch 99 batch_avg_loss: 0.3673119036236195
  batch 99 loss: 0.2804226279258728
  batch 99 loss_avg: 0.3117859959602356
  batch 99 loss_zero: 0.9331980347633362
  batch 99 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.745 0.0 1.2782 1.0213
true 0.7771 0.0 4.5469 1.4819
  batch 100 batch_avg_loss: 0.3664311867952347
  batch 100 loss: 0.279240220785141
  batch 100 loss_avg: 0.31469741463661194
  batch 100 loss_zero: 0.9185842871665955
  batch 100 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7924 0.0 1.3217 1.053
true 0.7912 0.0 7.1641 1.5181
  batch 101 batch_avg_loss: 0.3661723119197505
  batch 101 loss: 0.3402848243713379
  batch 101 loss_avg: 0.38199383020401
  batch 101 loss_zero: 1.0080225467681885
  batch 101 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8227 0.0 1.3298 1.0718
true 0.7108 0.0 4.6172 1.4297
  batch 102 batch_avg_loss: 0.3653201694582023
  batch 102 loss: 0.2792537808418274
  batch 102 loss_avg: 0.30040672421455383
  batch 102 loss_zero: 0.8056492209434509
  batch 102 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.786 0.0 1.3884 0.9995
true 0.7752 0.0 6.7578 1.4932
  batch 103 batch_avg_loss: 0.36497459018114703
  batch 103 loss: 0.3297255039215088
  batch 103 loss_avg: 0.36464443802833557
  batch 103 loss_zero: 0.9655932784080505
  batch 103 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7503 0.0 1.2858 0.9092
true 0.7405 0.0 4.6172 1.4165
  batch 104 batch_avg_loss: 0.36394753851569617
  batch 104 loss: 0.2581612169742584
  batch 104 loss_avg: 0.29145368933677673
  batch 104 loss_zero: 0.8398219347000122
  batch 104 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7227 0.0545 1.2897 0.8695
true 0.783 0.0 4.4922 1.4961
  batch 105 batch_avg_loss: 0.3632066797642481
  batch 105 loss: 0.28615736961364746
  batch 105 loss_avg: 0.3097818195819855
  batch 105 loss_zero: 0.9228594899177551
  batch 105 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7363 0.1003 1.2141 0.9196
true 0.8049 0.0 6.5508 1.5654
  batch 106 batch_avg_loss: 0.3628624031003916
  batch 106 loss: 0.32671335339546204
  batch 106 loss_avg: 0.3768414855003357
  batch 106 loss_zero: 1.0247176885604858
  batch 106 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8097 0.0 1.5847 1.0789
true 0.7534 0.0 4.4219 1.4849
  batch 107 batch_avg_loss: 0.36217972831191303
  batch 107 loss: 0.2898162007331848
  batch 107 loss_avg: 0.3388556241989136
  batch 107 loss_zero: 0.9064741730690002
  batch 107 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.859 0.0 1.7385 1.1853
true 0.7757 0.0 4.9062 1.4868
  batch 108 batch_avg_loss: 0.36135322021113503
  batch 108 loss: 0.27291685342788696
  batch 108 loss_avg: 0.30476871132850647
  batch 108 loss_zero: 0.9065223336219788
  batch 108 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8462 0.0 1.7001 1.1763
true 0.8541 0.0 4.8672 1.5801
  batch 109 batch_avg_loss: 0.3607797751186091
  batch 109 loss: 0.2988477051258087
  batch 109 loss_avg: 0.34182584285736084
  batch 109 loss_zero: 1.0713497400283813
  batch 109 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.839 0.0 1.8088 1.1663
true 0.7899 0.0 4.8867 1.5059
  batch 110 batch_avg_loss: 0.36003413796424866
  batch 110 loss: 0.2787596881389618
  batch 110 loss_avg: 0.3281751275062561
  batch 110 loss_zero: 0.9521089792251587
  batch 110 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7863 0.0 1.5496 1.1084
true 0.8356 0.0 5.4727 1.5527
  batch 111 batch_avg_loss: 0.3595441689899376
  batch 111 loss: 0.3056475818157196
  batch 111 loss_avg: 0.321144163608551
  batch 111 loss_zero: 1.019313097000122
  batch 111 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7551 0.0 1.7214 1.0236
true 0.7291 0.0 4.1875 1.4395
  batch 112 batch_avg_loss: 0.35861959361604284
  batch 112 loss: 0.25599172711372375
  batch 112 loss_avg: 0.288546085357666
  batch 112 loss_zero: 0.8200924396514893
  batch 112 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.703 0.0 1.2675 0.9447
true 0.8125 0.0 7.0703 1.5254
  batch 113 batch_avg_loss: 0.358368958255886
  batch 113 loss: 0.3302977979183197
  batch 113 loss_avg: 0.3462028503417969
  batch 113 loss_zero: 1.006435751914978
  batch 113 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6993 0.0 1.3404 0.9151
true 0.8153 0.0 6.5391 1.5376
  batch 114 batch_avg_loss: 0.358369327689472
  batch 114 loss: 0.3584110736846924
  batch 114 loss_avg: 0.3925725519657135
  batch 114 loss_zero: 1.0572649240493774
  batch 114 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.749 0.0 1.592 0.969
true 0.8274 0.0 5.6172 1.5391
  batch 115 batch_avg_loss: 0.3579823970794678
  batch 115 loss: 0.3138723075389862
  batch 115 loss_avg: 0.3526902198791504
  batch 115 loss_zero: 1.0372376441955566
  batch 115 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8337 0.0 1.559 1.1089
true 0.7846 0.0 6.6562 1.5024
  batch 116 batch_avg_loss: 0.35754464875007497
  batch 116 loss: 0.30720359086990356
  batch 116 loss_avg: 0.3699450194835663
  batch 116 loss_zero: 0.9855064153671265
  batch 116 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8905 0.0 1.9506 1.1803
true 0.7368 0.0 4.3516 1.4395
  batch 117 batch_avg_loss: 0.35709209141568243
  batch 117 loss: 0.3045954406261444
  batch 117 loss_avg: 0.3129720091819763
  batch 117 loss_zero: 0.8558943867683411
  batch 117 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8535 0.0 1.7144 1.141
true 0.7673 0.0 4.5391 1.4746
  batch 118 batch_avg_loss: 0.35630258084353755
  batch 118 loss: 0.2639298439025879
  batch 118 loss_avg: 0.30488529801368713
  batch 118 loss_zero: 0.8936323523521423
  batch 118 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7807 0.0 1.4891 1.0241
true 0.7122 0.0 3.9023 1.4141
  batch 119 batch_avg_loss: 0.3553984068772372
  batch 119 loss: 0.2487058788537979
  batch 119 loss_avg: 0.2895222008228302
  batch 119 loss_zero: 0.7967810034751892
  batch 119 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6971 0.0446 1.3052 0.87
true 0.7415 0.0 3.332 1.4487
  batch 120 batch_avg_loss: 0.3545273451755444
  batch 120 loss: 0.2508710026741028
  batch 120 loss_avg: 0.29127180576324463
  batch 120 loss_zero: 0.841071367263794
  batch 120 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6579 0.0 1.1341 0.8438
true 0.8367 0.0 5.0 1.5439
  batch 121 batch_avg_loss: 0.35428125959289963
  batch 121 loss: 0.32475098967552185
  batch 121 loss_avg: 0.31587162613868713
  batch 121 loss_zero: 1.0159595012664795
  batch 121 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6803 0.0 1.251 0.8987
true 0.7291 0.0 4.2305 1.4766
  batch 122 batch_avg_loss: 0.3534614034607762
  batch 122 loss: 0.25425881147384644
  batch 122 loss_avg: 0.3178863525390625
  batch 122 loss_zero: 0.8494473099708557
  batch 122 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7334 0.0 1.5919 0.9807
true 0.7561 0.0 5.8242 1.4707
  batch 123 batch_avg_loss: 0.3527907640711079
  batch 123 loss: 0.27097275853157043
  batch 123 loss_avg: 0.311877965927124
  batch 123 loss_zero: 0.8835585117340088
  batch 123 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7986 0.0 1.4889 1.0897
true 0.6838 0.0 5.7617 1.4067
  batch 124 batch_avg_loss: 0.3523158444271934
  batch 124 loss: 0.293900728225708
  batch 124 loss_avg: 0.33809471130371094
  batch 124 loss_zero: 0.8056703805923462
  batch 124 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8012 0.0 1.5805 1.0865
true 0.7454 0.0 9.1797 1.4492
  batch 125 batch_avg_loss: 0.3519077445268631
  batch 125 loss: 0.30130335688591003
  batch 125 loss_avg: 0.3555939495563507
  batch 125 loss_zero: 0.9112861156463623
  batch 125 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7728 0.0 1.536 1.0957
true 0.7901 0.0 5.3516 1.4985
  batch 126 batch_avg_loss: 0.35144222977142486
  batch 126 loss: 0.2932528853416443
  batch 126 loss_avg: 0.3201693892478943
  batch 126 loss_zero: 0.944489061832428
  batch 126 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7528 0.0 1.5976 1.0387
true 0.816 0.0 4.918 1.5522
  batch 127 batch_avg_loss: 0.35102658748157384
  batch 127 loss: 0.2986556589603424
  batch 127 loss_avg: 0.36146050691604614
  batch 127 loss_zero: 1.0273960828781128
  batch 127 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7446 0.0 1.6066 1.0709
true 0.7943 0.0 7.6016 1.5293
  batch 128 batch_avg_loss: 0.35083933116402477
  batch 128 loss: 0.32705777883529663
  batch 128 loss_avg: 0.4076556861400604
  batch 128 loss_zero: 1.0385948419570923
  batch 128 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.761 0.0 1.6947 1.1094
true 0.7417 0.0 4.5547 1.4497
  batch 129 batch_avg_loss: 0.35018489608006886
  batch 129 loss: 0.2664172053337097
  batch 129 loss_avg: 0.3133354187011719
  batch 129 loss_zero: 0.86347496509552
  batch 129 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7578 0.0 1.8943 1.0948
true 0.7935 0.0 5.2617 1.5225
  batch 130 batch_avg_loss: 0.34986568402785523
  batch 130 loss: 0.30868732929229736
  batch 130 loss_avg: 0.3532141447067261
  batch 130 loss_zero: 0.982875406742096
  batch 130 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7657 0.0 1.6039 1.0668
true 0.8621 0.0 7.4844 1.6211
  batch 131 batch_avg_loss: 0.3501269399892283
  batch 131 loss: 0.38409021496772766
  batch 131 loss_avg: 0.43797722458839417
  batch 131 loss_zero: 1.1811832189559937
  batch 131 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7951 0.0 1.6937 1.1178
true 0.8272 0.0 6.4062 1.5273
  batch 132 batch_avg_loss: 0.35004415306629555
  batch 132 loss: 0.3391990661621094
  batch 132 loss_avg: 0.363203763961792
  batch 132 loss_zero: 1.0474005937576294
  batch 132 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8274 0.0 1.7247 1.1713
true 0.7772 0.0 6.3438 1.4902
  batch 133 batch_avg_loss: 0.34993202289692443
  batch 133 loss: 0.33513084053993225
  batch 133 loss_avg: 0.364623486995697
  batch 133 loss_zero: 0.968640923500061
  batch 133 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8261 0.0 1.8063 1.0993
true 0.8656 0.0 7.7188 1.582
  batch 134 batch_avg_loss: 0.35012773646792367
  batch 134 loss: 0.37615764141082764
  batch 134 loss_avg: 0.4337904751300812
  batch 134 loss_zero: 1.1830135583877563
  batch 134 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.84 0.0 1.7813 1.109
true 0.741 0.0 5.2617 1.4697
  batch 135 batch_avg_loss: 0.3497114368059017
  batch 135 loss: 0.29392728209495544
  batch 135 loss_avg: 0.32362404465675354
  batch 135 loss_zero: 0.872739851474762
  batch 135 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8103 0.0 1.7269 1.0786
true 0.767 0.0 4.9219 1.5024
  batch 136 batch_avg_loss: 0.3492866814793909
  batch 136 loss: 0.2919447124004364
  batch 136 loss_avg: 0.34595590829849243
  batch 136 loss_zero: 0.9343082904815674
  batch 136 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7704 0.0 1.5441 1.0078
true 0.7414 0.0 3.9883 1.4307
  batch 137 batch_avg_loss: 0.34855769618149224
  batch 137 loss: 0.24941569566726685
  batch 137 loss_avg: 0.2882843613624573
  batch 137 loss_zero: 0.8379902839660645
  batch 137 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7301 0.0 1.5186 0.9566
true 0.7869 0.0 6.5391 1.5405
  batch 138 batch_avg_loss: 0.34833100081785867
  batch 138 loss: 0.31727373600006104
  batch 138 loss_avg: 0.36759451031684875
  batch 138 loss_zero: 0.9868606328964233
  batch 138 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7237 0.1076 1.7168 0.9472
true 0.766 0.0 6.5469 1.4619
  batch 139 batch_avg_loss: 0.34791076644290264
  batch 139 loss: 0.2899184226989746
  batch 139 loss_avg: 0.3342566192150116
  batch 139 loss_zero: 0.9210435152053833
  batch 139 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7407 0.0 1.7419 1.0021
true 0.77 0.0 6.0 1.4839
  batch 140 batch_avg_loss: 0.3477428929081985
  batch 140 loss: 0.32440847158432007
  batch 140 loss_avg: 0.37945371866226196
  batch 140 loss_zero: 0.9723914861679077
  batch 140 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7689 0.0 1.8521 1.0694
true 0.8025 0.0 5.7891 1.502
  batch 141 batch_avg_loss: 0.3473924959593631
  batch 141 loss: 0.298336923122406
  batch 141 loss_avg: 0.3487544655799866
  batch 141 loss_zero: 0.992787778377533
  batch 141 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8174 0.0 1.7784 1.145
true 0.7668 0.0 6.8359 1.5117
  batch 142 batch_avg_loss: 0.34711936609426014
  batch 142 loss: 0.3086080551147461
  batch 142 loss_avg: 0.38238921761512756
  batch 142 loss_zero: 0.9704325199127197
  batch 142 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.828 0.0 2.2714 1.2152
true 0.7725 0.0 4.9453 1.5029
  batch 143 batch_avg_loss: 0.3469628403028408
  batch 143 loss: 0.32473617792129517
  batch 143 loss_avg: 0.33324190974235535
  batch 143 loss_zero: 0.92994225025177
  batch 143 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8096 0.0 2.1913 1.1293
true 0.8213 0.0 5.6562 1.5674
  batch 144 batch_avg_loss: 0.34668266038513845
  batch 144 loss: 0.3066169321537018
  batch 144 loss_avg: 0.3756200969219208
  batch 144 loss_zero: 1.0500768423080444
  batch 144 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.793 0.0 1.9211 1.09
true 0.7731 0.0 5.5039 1.4941
  batch 145 batch_avg_loss: 0.3461075286413061
  batch 145 loss: 0.26328855752944946
  batch 145 loss_avg: 0.31842637062072754
  batch 145 loss_zero: 0.9161302447319031
  batch 145 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7669 0.0 2.272 0.992
true 0.8016 0.0 5.5664 1.5435
  batch 146 batch_avg_loss: 0.3457607617729331
  batch 146 loss: 0.29547956585884094
  batch 146 loss_avg: 0.3697650134563446
  batch 146 loss_zero: 1.0123860836029053
  batch 146 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7598 0.0 1.7712 1.01
true 0.7212 0.0 6.0781 1.4272
  batch 147 batch_avg_loss: 0.3451086710504934
  batch 147 loss: 0.24990342557430267
  batch 147 loss_avg: 0.30657708644866943
  batch 147 loss_zero: 0.8267784714698792
  batch 147 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7412 0.0 1.6308 0.9943
true 0.7779 0.0 5.2812 1.4683
  batch 148 batch_avg_loss: 0.34449266078504354
  batch 148 loss: 0.253939151763916
  batch 148 loss_avg: 0.2843363881111145
  batch 148 loss_zero: 0.8893871903419495
  batch 148 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7369 0.0 2.1495 0.9238
true 0.8695 0.0 7.7969 1.563
  batch 149 batch_avg_loss: 0.34426078580369884
  batch 149 loss: 0.309943288564682
  batch 149 loss_avg: 0.3485647141933441
  batch 149 loss_zero: 1.104623794555664
  batch 149 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7736 0.0 1.6436 1.0381
true 0.8117 0.0 5.3828 1.5137
  batch 150 batch_avg_loss: 0.3439136262734731
  batch 150 loss: 0.2921868562698364
  batch 150 loss_avg: 0.33915629982948303
  batch 150 loss_zero: 0.998081386089325
  batch 150 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8199 0.0 1.9602 1.0709
true 0.748 0.0 3.6133 1.4238
  batch 151 batch_avg_loss: 0.3432866126693637
  batch 151 loss: 0.24923457205295563
  batch 151 loss_avg: 0.2619703710079193
  batch 151 loss_zero: 0.8214007019996643
  batch 151 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8284 0.0 1.9253 1.0693
true 0.7611 0.0 4.3516 1.459
  batch 152 batch_avg_loss: 0.3428061538817067
  batch 152 loss: 0.2702568769454956
  batch 152 loss_avg: 0.30720359086990356
  batch 152 loss_zero: 0.8864610195159912
  batch 152 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8066 0.0 1.8001 1.0216
true 0.7468 0.0 4.7266 1.4434
  batch 153 batch_avg_loss: 0.3424047450808918
  batch 153 loss: 0.28139060735702515
  batch 153 loss_avg: 0.3016327917575836
  batch 153 loss_zero: 0.8594015836715698
  batch 153 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7626 0.0 1.7578 0.9944
true 0.7298 0.0 5.7109 1.4238
  batch 154 batch_avg_loss: 0.3418883244906153
  batch 154 loss: 0.2628759741783142
  batch 154 loss_avg: 0.31497111916542053
  batch 154 loss_zero: 0.8475569486618042
  batch 154 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7201 0.0 1.7751 0.8777
true 0.8 0.0 4.0078 1.5322
  batch 155 batch_avg_loss: 0.341512480570424
  batch 155 loss: 0.2836325168609619
  batch 155 loss_avg: 0.34097129106521606
  batch 155 loss_zero: 0.9809152483940125
  batch 155 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7143 0.0 1.7055 0.9169
true 0.735 0.0 6.4062 1.4043
  batch 156 batch_avg_loss: 0.3410330687004786
  batch 156 loss: 0.26672422885894775
  batch 156 loss_avg: 0.29180845618247986
  batch 156 loss_zero: 0.8320115208625793
  batch 156 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7134 0.0 1.994 0.9565
true 0.8663 0.0 6.0312 1.5923
  batch 157 batch_avg_loss: 0.3411083975984792
  batch 157 loss: 0.3528597056865692
  batch 157 loss_avg: 0.3967784643173218
  batch 157 loss_zero: 1.147276759147644
  batch 157 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7614 0.0 2.259 1.0463
true 0.7007 0.0 4.3906 1.4478
  batch 158 batch_avg_loss: 0.3408065354333648
  batch 158 loss: 0.2934141755104065
  batch 158 loss_avg: 0.30850300192832947
  batch 158 loss_zero: 0.7994959950447083
  batch 158 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7822 0.0 2.4909 1.0876
true 0.7872 0.0 5.4883 1.5
  batch 159 batch_avg_loss: 0.3404925273461912
  batch 159 loss: 0.2908792495727539
  batch 159 loss_avg: 0.33148664236068726
  batch 159 loss_zero: 0.9510999917984009
  batch 159 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8004 0.0 2.691 1.0749
true 0.7643 0.0 6.5469 1.4775
  batch 160 batch_avg_loss: 0.3400851755402982
  batch 160 loss: 0.2753162384033203
  batch 160 loss_avg: 0.32715365290641785
  batch 160 loss_zero: 0.9113338589668274
  batch 160 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8024 0.0 2.3977 1.0635
true 0.7928 0.0 4.5078 1.5049
  batch 161 batch_avg_loss: 0.3397437477519053
  batch 161 loss: 0.2851153016090393
  batch 161 loss_avg: 0.30895301699638367
  batch 161 loss_zero: 0.9374161958694458
  batch 161 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.792 0.0 2.3922 1.0426
true 0.7763 0.0 5.0547 1.4824
  batch 162 batch_avg_loss: 0.33931472851538363
  batch 162 loss: 0.2702426314353943
  batch 162 loss_avg: 0.30976733565330505
  batch 162 loss_zero: 0.9123730063438416
  batch 162 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7794 0.0 1.9972 0.9704
true 0.7897 0.0 5.1172 1.5034
  batch 163 batch_avg_loss: 0.3389900457456799
  batch 163 loss: 0.2863914370536804
  batch 163 loss_avg: 0.3524613082408905
  batch 163 loss_zero: 0.9760857224464417
  batch 163 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7771 0.0 1.8831 0.9725
true 0.7935 0.0 5.4648 1.5527
  batch 164 batch_avg_loss: 0.3387871632670484
  batch 164 loss: 0.3057173192501068
  batch 164 loss_avg: 0.379476934671402
  batch 164 loss_zero: 1.0090491771697998
  batch 164 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7834 0.0 2.2944 0.9692
true 0.8713 0.0 6.8477 1.6748
  batch 165 batch_avg_loss: 0.33922818366325264
  batch 165 loss: 0.41155552864074707
  batch 165 loss_avg: 0.4927468001842499
  batch 165 loss_zero: 1.2519803047180176
  batch 165 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8309 0.0 1.8642 1.116
true 0.7275 0.0 5.3828 1.4648
  batch 166 batch_avg_loss: 0.33877440164965317
  batch 166 loss: 0.26390036940574646
  batch 166 loss_avg: 0.3316434919834137
  batch 166 loss_zero: 0.8608368635177612
  batch 166 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8419 0.0 2.1497 1.1289
true 0.7376 0.0 9.625 1.4844
  batch 167 batch_avg_loss: 0.33871366119313384
  batch 167 loss: 0.3286307454109192
  batch 167 loss_avg: 0.40395447611808777
  batch 167 loss_zero: 0.9479528665542603
  batch 167 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8055 0.0 2.344 1.1166
true 0.8256 0.0 6.9648 1.542
  batch 168 batch_avg_loss: 0.3385315593332052
  batch 168 loss: 0.3081205487251282
  batch 168 loss_avg: 0.3596119284629822
  batch 168 loss_zero: 1.0411759614944458
  batch 168 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.779 0.0 2.1114 1.1602
true 0.7806 0.0 6.8359 1.5122
  batch 169 batch_avg_loss: 0.3382492068074864
  batch 169 loss: 0.29081398248672485
  batch 169 loss_avg: 0.3657432794570923
  batch 169 loss_zero: 0.9750199913978577
  batch 169 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7455 0.0 2.0742 1.1325
true 0.7857 0.0 4.9219 1.5156
  batch 170 batch_avg_loss: 0.33778706377043444
  batch 170 loss: 0.25968489050865173
  batch 170 loss_avg: 0.3380559980869293
  batch 170 loss_zero: 0.9553136229515076
  batch 170 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7275 0.0 2.0829 1.1396
true 0.7811 0.0 5.8672 1.4883
  batch 171 batch_avg_loss: 0.33751346815747824
  batch 171 loss: 0.29100221395492554
  batch 171 loss_avg: 0.33258211612701416
  batch 171 loss_zero: 0.9426991939544678
  batch 171 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7219 0.0 2.3014 1.0408
true 0.7488 0.0 5.6562 1.4766
  batch 172 batch_avg_loss: 0.33710958696035453
  batch 172 loss: 0.26804590225219727
  batch 172 loss_avg: 0.339091420173645
  batch 172 loss_zero: 0.8998389840126038
  batch 172 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7248 0.0 2.0434 1.01
true 0.7879 0.0 7.1484 1.4902
  batch 173 batch_avg_loss: 0.3371072651850695
  batch 173 loss: 0.3367079198360443
  batch 173 loss_avg: 0.37406960129737854
  batch 173 loss_zero: 0.9948064684867859
  batch 173 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7404 0.0 1.8222 1.0204
true 0.763 0.0 6.0977 1.4634
  batch 174 batch_avg_loss: 0.33700465102647914
  batch 174 loss: 0.3192524015903473
  batch 174 loss_avg: 0.3565017282962799
  batch 174 loss_zero: 0.9387102723121643
  batch 174 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7563 0.0 2.3851 0.9927
true 0.7926 0.0 6.7383 1.5322
  batch 175 batch_avg_loss: 0.3367465343645641
  batch 175 loss: 0.2918342351913452
  batch 175 loss_avg: 0.3782009780406952
  batch 175 loss_zero: 1.0064842700958252
  batch 175 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7856 0.0 2.6404 0.9996
true 0.7335 0.0 3.6406 1.4434
  batch 176 batch_avg_loss: 0.33620541872964665
  batch 176 loss: 0.24151018261909485
  batch 176 loss_avg: 0.29950186610221863
  batch 176 loss_zero: 0.8375086188316345
  batch 176 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7996 0.0 1.966 1.0347
true 0.7931 0.0 7.125 1.5088
  batch 177 batch_avg_loss: 0.33598004887669775
  batch 177 loss: 0.29631495475769043
  batch 177 loss_avg: 0.34960219264030457
  batch 177 loss_zero: 0.9786677956581116
  batch 177 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8092 0.0 2.4076 1.0378
true 0.7421 0.0 4.5508 1.4551
  batch 178 batch_avg_loss: 0.3354813235529353
  batch 178 loss: 0.2472069412469864
  batch 178 loss_avg: 0.30233410000801086
  batch 178 loss_zero: 0.8530881404876709
  batch 178 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7978 0.0 2.1363 1.0394
true 0.7841 0.0 5.1172 1.4512
  batch 179 batch_avg_loss: 0.33520963405097665
  batch 179 loss: 0.28684890270233154
  batch 179 loss_avg: 0.311722993850708
  batch 179 loss_zero: 0.9265604615211487
  batch 179 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7785 0.0 1.9461 1.0238
true 0.754 0.0 5.4688 1.46
  batch 180 batch_avg_loss: 0.3347671548525492
  batch 180 loss: 0.2555633783340454
  batch 180 loss_avg: 0.3022833466529846
  batch 180 loss_zero: 0.8707464933395386
  batch 180 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7543 0.0 2.0487 0.9866
true 0.765 0.0 5.3828 1.5103
  batch 181 batch_avg_loss: 0.33442129845118657
  batch 181 loss: 0.2721671462059021
  batch 181 loss_avg: 0.32464122772216797
  batch 181 loss_zero: 0.9099005460739136
  batch 181 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7392 0.0 2.2709 0.9718
true 0.7292 0.0 4.2305 1.4512
  batch 182 batch_avg_loss: 0.334054348887978
  batch 182 loss: 0.2676364779472351
  batch 182 loss_avg: 0.3103819787502289
  batch 182 loss_zero: 0.8421623706817627
  batch 182 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7259 0.0 2.2465 0.9568
true 0.778 0.0 7.0781 1.5166
  batch 183 batch_avg_loss: 0.33428692084844
  batch 183 loss: 0.3766150176525116
  batch 183 loss_avg: 0.4452814757823944
  batch 183 loss_zero: 1.0505396127700806
  batch 183 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7363 0.0 2.0993 0.9431
true 0.7924 0.0 8.3516 1.4961
  batch 184 batch_avg_loss: 0.33417788423273875
  batch 184 loss: 0.3142241835594177
  batch 184 loss_avg: 0.36397677659988403
  batch 184 loss_zero: 0.9918590188026428
  batch 184 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7636 0.0 2.2547 1.0577
true 0.7744 0.0 5.0508 1.4746
  batch 185 batch_avg_loss: 0.3339192728738527
  batch 185 loss: 0.2863347828388214
  batch 185 loss_avg: 0.32513585686683655
  batch 185 loss_zero: 0.9248150587081909
  batch 185 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7881 0.0 2.9566 1.0633
true 0.8009 0.0 6.7461 1.5542
  batch 186 batch_avg_loss: 0.3338518765985325
  batch 186 loss: 0.3213835656642914
  batch 186 loss_avg: 0.40434005856513977
  batch 186 loss_zero: 1.045719861984253
  batch 186 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8217 0.0 2.4803 1.1542
true 0.7189 0.0 5.5039 1.4395
  batch 187 batch_avg_loss: 0.3335003545258772
  batch 187 loss: 0.2681172490119934
  batch 187 loss_avg: 0.3181109130382538
  batch 187 loss_zero: 0.8348960280418396
  batch 187 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8142 0.0 2.8229 1.1239
true 0.776 0.0 5.1914 1.4946
  batch 188 batch_avg_loss: 0.33321536237255056
  batch 188 loss: 0.27992182970046997
  batch 188 loss_avg: 0.3310213088989258
  batch 188 loss_zero: 0.9331802129745483
  batch 188 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.78 0.0 2.8748 1.0779
true 0.7961 0.0 4.8281 1.5259
  batch 189 batch_avg_loss: 0.3330442266804831
  batch 189 loss: 0.30087071657180786
  batch 189 loss_avg: 0.34753111004829407
  batch 189 loss_zero: 0.981247067451477
  batch 189 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7552 0.0 2.486 1.0425
true 0.8082 0.0 4.3594 1.5547
  batch 190 batch_avg_loss: 0.33285475985000007
  batch 190 loss: 0.2970455288887024
  batch 190 loss_avg: 0.37795522809028625
  batch 190 loss_zero: 1.0311801433563232
  batch 190 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7495 0.0 2.4626 1.001
true 0.8531 0.0 7.1797 1.5669
  batch 191 batch_avg_loss: 0.33298688814902183
  batch 191 loss: 0.35809126496315
  batch 191 loss_avg: 0.39251062273979187
  batch 191 loss_zero: 1.1202778816223145
  batch 191 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7763 0.0 2.0699 1.0276
true 0.8036 0.0 5.4375 1.5352
  batch 192 batch_avg_loss: 0.33271637217452127
  batch 192 loss: 0.2810478210449219
  batch 192 loss_avg: 0.33346375823020935
  batch 192 loss_zero: 0.9792570471763611
  batch 192 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8015 0.0 2.1771 1.09
true 0.8247 0.0 5.9375 1.5713
  batch 193 batch_avg_loss: 0.3326706892468151
  batch 193 loss: 0.3238995671272278
  batch 193 loss_avg: 0.3919649124145508
  batch 193 loss_zero: 1.072119951248169
  batch 193 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8394 0.0 2.407 1.1382
true 0.7212 0.0 5.2812 1.4473
  batch 194 batch_avg_loss: 0.33235083750842775
  batch 194 loss: 0.2706194519996643
  batch 194 loss_avg: 0.31742995977401733
  batch 194 loss_zero: 0.8376120328903198
  batch 194 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8241 0.0 2.6626 1.0833
true 0.7568 0.0 5.2188 1.4873
  batch 195 batch_avg_loss: 0.33208761245776447
  batch 195 loss: 0.28102195262908936
  batch 195 loss_avg: 0.33103078603744507
  batch 195 loss_zero: 0.9037707448005676
  batch 195 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7863 0.0 2.0185 1.0223
true 0.8028 0.0 5.4219 1.5303
  batch 196 batch_avg_loss: 0.33199884544829933
  batch 196 loss: 0.3146892786026001
  batch 196 loss_avg: 0.3726147711277008
  batch 196 loss_zero: 1.0170505046844482
  batch 196 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.761 0.0 2.2953 0.97
true 0.7927 0.0 3.8242 1.4761
  batch 197 batch_avg_loss: 0.33162931833170395
  batch 197 loss: 0.2592020034790039
  batch 197 loss_avg: 0.28944626450538635
  batch 197 loss_zero: 0.9178739786148071
  batch 197 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7446 0.033 2.4216 0.9493
true 0.7438 0.0 5.2109 1.4668
  batch 198 batch_avg_loss: 0.33145720188063804
  batch 198 loss: 0.2975502610206604
  batch 198 loss_avg: 0.35655295848846436
  batch 198 loss_zero: 0.9097601175308228
  batch 198 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7354 0.0 2.6613 0.9078
true 0.7841 0.0 5.8008 1.5059
  batch 199 batch_avg_loss: 0.3311772276109187
  batch 199 loss: 0.2757423222064972
  batch 199 loss_avg: 0.3336280882358551
  batch 199 loss_zero: 0.9484754204750061
  batch 199 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7456 0.0 2.4868 0.985
true 0.7615 0.0 5.0781 1.4546
  batch 200 batch_avg_loss: 0.33078394502401354
  batch 200 loss: 0.25252071022987366
  batch 200 loss_avg: 0.30275818705558777
  batch 200 loss_zero: 0.8826697468757629
  batch 200 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7606 0.0 3.1395 1.0117
true 0.7535 0.0 3.7383 1.4385
  batch 201 batch_avg_loss: 0.3304005167377529
  batch 201 loss: 0.2537148594856262
  batch 201 loss_avg: 0.26980119943618774
  batch 201 loss_zero: 0.837567150592804
  batch 201 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7657 0.0 2.14 0.9965
true 0.7756 0.0 6.6797 1.4707
  batch 202 batch_avg_loss: 0.3300535289367827
  batch 202 loss: 0.26030898094177246
  batch 202 loss_avg: 0.3135093152523041
  batch 202 loss_zero: 0.9150283932685852
  batch 202 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7745 0.0 2.0211 1.0302
true 0.7712 0.0 5.1875 1.502
  batch 203 batch_avg_loss: 0.3298310141258052
  batch 203 loss: 0.2848830223083496
  batch 203 loss_avg: 0.3511635959148407
  batch 203 loss_zero: 0.9458790421485901
  batch 203 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7855 0.0 2.1216 1.0416
true 0.7865 0.0 8.6094 1.5215
  batch 204 batch_avg_loss: 0.3297549728669372
  batch 204 loss: 0.31431859731674194
  batch 204 loss_avg: 0.3840184807777405
  batch 204 loss_zero: 1.0026333332061768
  batch 204 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7988 0.0 2.3511 1.0227
true 0.8144 0.0 4.0469 1.5664
  batch 205 batch_avg_loss: 0.3295373984953252
  batch 205 loss: 0.28515222668647766
  batch 205 loss_avg: 0.3541184961795807
  batch 205 loss_zero: 1.0173170566558838
  batch 205 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8182 0.0 2.3437 1.1248
true 0.6636 0.0 4.7188 1.4077
  batch 206 batch_avg_loss: 0.3293000569621336
  batch 206 loss: 0.2806450426578522
  batch 206 loss_avg: 0.30655577778816223
  batch 206 loss_zero: 0.7469629645347595
  batch 206 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7817 0.0 2.1253 1.0438
true 0.7268 0.0 4.25 1.4351
  batch 207 batch_avg_loss: 0.3289554396977171
  batch 207 loss: 0.25796428322792053
  batch 207 loss_avg: 0.31323665380477905
  batch 207 loss_zero: 0.8414552211761475
  batch 207 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7299 0.0 1.9036 0.9907
true 0.792 0.0 7.1797 1.4995
  batch 208 batch_avg_loss: 0.32878727566164273
  batch 208 loss: 0.2939773201942444
  batch 208 loss_avg: 0.36020922660827637
  batch 208 loss_zero: 0.9875169992446899
  batch 208 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7028 0.0 1.4849 0.9328
true 0.7433 0.0 4.3281 1.437
  batch 209 batch_avg_loss: 0.32844706400159446
  batch 209 loss: 0.25768303871154785
  batch 209 loss_avg: 0.2936892807483673
  batch 209 loss_zero: 0.8462110757827759
  batch 209 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6878 0.0 1.3 0.9393
true 0.6845 0.0 4.1641 1.3691
  batch 210 batch_avg_loss: 0.327943640095847
  batch 210 loss: 0.22272804379463196
  batch 210 loss_avg: 0.26591435074806213
  batch 210 loss_zero: 0.7345182299613953
  batch 210 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.669 0.0 1.5309 0.9014
true 0.8555 0.0 6.7656 1.5889
  batch 211 batch_avg_loss: 0.3280800952448099
  batch 211 loss: 0.3567356765270233
  batch 211 loss_avg: 0.3894147574901581
  batch 211 loss_zero: 1.1213552951812744
  batch 211 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7013 0.0 1.3342 0.9432
true 0.791 0.0 5.6406 1.498
  batch 212 batch_avg_loss: 0.3278699919300259
  batch 212 loss: 0.28353819251060486
  batch 212 loss_avg: 0.3293694853782654
  batch 212 loss_zero: 0.9549902677536011
  batch 212 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7514 0.0 1.6366 1.0075
true 0.8198 0.0 4.4844 1.5317
  batch 213 batch_avg_loss: 0.32768338121158974
  batch 213 loss: 0.28812190890312195
  batch 213 loss_avg: 0.3313492238521576
  batch 213 loss_zero: 1.0034844875335693
  batch 213 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.8158 0.0 1.8095 1.0994
true 0.7862 0.0 6.5391 1.4849
  batch 214 batch_avg_loss: 0.32756613208868796
  batch 214 loss: 0.30259206891059875
  batch 214 loss_avg: 0.354420006275177
  batch 214 loss_zero: 0.9725401401519775
  batch 214 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8579 0.0 1.9026 1.1719
true 0.7443 0.0 6.7656 1.4385
  batch 215 batch_avg_loss: 0.327399623255397
  batch 215 loss: 0.2917667329311371
  batch 215 loss_avg: 0.3224276006221771
  batch 215 loss_zero: 0.8764205574989319
  batch 215 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8438 0.0 1.7496 1.1656
true 0.8084 0.0 4.832 1.5293
  batch 216 batch_avg_loss: 0.3271585206190745
  batch 216 loss: 0.27532145380973816
  batch 216 loss_avg: 0.3330269455909729
  batch 216 loss_zero: 0.9865952134132385
  batch 216 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8193 0.0 1.7168 1.1115
true 0.797 0.0 6.0 1.498
  batch 217 batch_avg_loss: 0.32702360491049454
  batch 217 loss: 0.2978818118572235
  batch 217 loss_avg: 0.3492181599140167
  batch 217 loss_zero: 0.9843817949295044
  batch 217 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7875 0.0 2.5927 1.0233
true 0.7207 0.0 4.5938 1.4731
  batch 218 batch_avg_loss: 0.32679472808991006
  batch 218 loss: 0.2771284580230713
  batch 218 loss_avg: 0.3607216775417328
  batch 218 loss_zero: 0.8801925182342529
  batch 218 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7528 0.0 1.8998 1.0091
true 0.7687 0.0 4.8125 1.4868
  batch 219 batch_avg_loss: 0.32652698613737274
  batch 219 loss: 0.26815924048423767
  batch 219 loss_avg: 0.3212908208370209
  batch 219 loss_zero: 0.9121277928352356
  batch 219 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7295 0.0648 1.8501 0.9936
true 0.8032 0.0 5.1797 1.5303
  batch 220 batch_avg_loss: 0.326540806889534
  batch 220 loss: 0.329567551612854
  batch 220 loss_avg: 0.3823543190956116
  batch 220 loss_zero: 1.0274658203125
  batch 220 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7315 0.0 2.2339 0.9951
true 0.7654 0.0 4.3477 1.5508
  batch 221 batch_avg_loss: 0.32649647124212794
  batch 221 loss: 0.3167426288127899
  batch 221 loss_avg: 0.39339888095855713
  batch 221 loss_zero: 0.9792434573173523
  batch 221 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7485 0.0 2.1041 1.0931
true 0.7479 0.0 5.375 1.4775
  batch 222 batch_avg_loss: 0.3263104791576798
  batch 222 loss: 0.28520622849464417
  batch 222 loss_avg: 0.3385717570781708
  batch 222 loss_zero: 0.8979398608207703
  batch 222 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7626 0.0 2.7493 1.0935
true 0.8161 0.0 5.6992 1.5391
  batch 223 batch_avg_loss: 0.32624805160702075
  batch 223 loss: 0.3123891353607178
  batch 223 loss_avg: 0.391120046377182
  batch 223 loss_zero: 1.0571057796478271
  batch 223 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.791 0.0 2.7921 1.2086
true 0.8171 0.0 4.7305 1.5503
  batch 224 batch_avg_loss: 0.3261394247944866
  batch 224 loss: 0.30191564559936523
  batch 224 loss_avg: 0.3642423748970032
  batch 224 loss_zero: 1.0318210124969482
  batch 224 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.821 0.0 3.3252 1.2277
true 0.8761 0.0 7.8281 1.5913
  batch 225 batch_avg_loss: 0.32629932827419705
  batch 225 loss: 0.3621177077293396
  batch 225 loss_avg: 0.4308457672595978
  batch 225 loss_zero: 1.1983593702316284
  batch 225 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8639 0.0 2.453 1.2945
true 0.7977 0.0 6.8867 1.5234
  batch 226 batch_avg_loss: 0.3262161220860692
  batch 226 loss: 0.30749472975730896
  batch 226 loss_avg: 0.3574686050415039
  batch 226 loss_zero: 0.9938083291053772
  batch 226 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8679 0.0 2.8716 1.2268
true 0.8299 0.0 5.582 1.5479
  batch 227 batch_avg_loss: 0.3260897538472902
  batch 227 loss: 0.29753053188323975
  batch 227 loss_avg: 0.3527224063873291
  batch 227 loss_zero: 1.041473150253296
  batch 227 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8531 0.0 2.6502 1.1463
true 0.7901 0.0 6.3906 1.5059
  batch 228 batch_avg_loss: 0.3259773360271203
  batch 228 loss: 0.30045849084854126
  batch 228 loss_avg: 0.36194053292274475
  batch 228 loss_zero: 0.9861547350883484
  batch 228 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8199 0.0 1.9635 1.0949
true 0.7505 0.0 6.418 1.5137
  batch 229 batch_avg_loss: 0.3258315085323617
  batch 229 loss: 0.29258283972740173
  batch 229 loss_avg: 0.3806811571121216
  batch 229 loss_zero: 0.943936288356781
  batch 229 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7813 0.0 2.1728 0.998
true 0.7671 0.0 4.8125 1.5098
  batch 230 batch_avg_loss: 0.32568950769693955
  batch 230 loss: 0.29317131638526917
  batch 230 loss_avg: 0.3749323785305023
  batch 230 loss_zero: 0.9633383750915527
  batch 230 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7536 0.0 2.5012 0.9505
true 0.7922 0.0 5.5234 1.5244
  batch 231 batch_avg_loss: 0.325585191255008
  batch 231 loss: 0.3015924096107483
  batch 231 loss_avg: 0.37504255771636963
  batch 231 loss_zero: 1.002611756324768
  batch 231 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7468 0.0 2.2302 0.9503
true 0.7154 0.0 5.5703 1.4346
  batch 232 batch_avg_loss: 0.32526158682745077
  batch 232 loss: 0.25050896406173706
  batch 232 loss_avg: 0.3093188405036926
  batch 232 loss_zero: 0.8211697340011597
  batch 232 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7364 0.0 2.0314 0.9469
true 0.7685 0.0 6.3125 1.522
  batch 233 batch_avg_loss: 0.3251342466460789
  batch 233 loss: 0.2955913245677948
  batch 233 loss_avg: 0.37926769256591797
  batch 233 loss_zero: 0.9698516130447388
  batch 233 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7372 0.0 2.2214 1.0362
true 0.7578 0.0 4.4102 1.498
  batch 234 batch_avg_loss: 0.32481590575642055
  batch 234 loss: 0.25064247846603394
  batch 234 loss_avg: 0.34205538034439087
  batch 234 loss_zero: 0.916280210018158
  batch 234 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7505 0.0 2.2513 1.0904
true 0.7309 0.0 4.4375 1.4375
  batch 235 batch_avg_loss: 0.3245776839712833
  batch 235 loss: 0.26883378624916077
  batch 235 loss_avg: 0.2936185896396637
  batch 235 loss_zero: 0.8278359770774841
  batch 235 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7508 0.0 2.1416 1.1039
true 0.7255 0.0 6.2656 1.4634
  batch 236 batch_avg_loss: 0.32431016445665034
  batch 236 loss: 0.2614430785179138
  batch 236 loss_avg: 0.3369646966457367
  batch 236 loss_zero: 0.8632928729057312
  batch 236 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7335 0.0 2.6967 1.0617
true 0.781 0.0 6.4609 1.4731
  batch 237 batch_avg_loss: 0.3241590694033144
  batch 237 loss: 0.2885006368160248
  batch 237 loss_avg: 0.3197217881679535
  batch 237 loss_zero: 0.9297162294387817
  batch 237 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7303 0.0 1.9366 1.0438
true 0.7679 0.0 9.1094 1.4893
  batch 238 batch_avg_loss: 0.324121198358656
  batch 238 loss: 0.3151457607746124
  batch 238 loss_avg: 0.3912183940410614
  batch 238 loss_zero: 0.9808217883110046
  batch 238 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7297 0.0 2.1209 1.0119
true 0.7986 0.0 5.125 1.5112
  batch 239 batch_avg_loss: 0.3240032659913705
  batch 239 loss: 0.29593536257743835
  batch 239 loss_avg: 0.35098209977149963
  batch 239 loss_zero: 0.9887844324111938
  batch 239 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.744 0.0 1.9581 1.0446
true 0.7793 0.0 7.0781 1.5161
  batch 240 batch_avg_loss: 0.3239426616579294
  batch 240 loss: 0.3094582259654999
  batch 240 loss_avg: 0.38824689388275146
  batch 240 loss_zero: 0.9955289363861084
  batch 240 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7654 0.0 2.2022 1.0609
true 0.7764 0.0 5.1641 1.4819
  batch 241 batch_avg_loss: 0.3237417433024442
  batch 241 loss: 0.27552133798599243
  batch 241 loss_avg: 0.3316218852996826
  batch 241 loss_zero: 0.9344215989112854
  batch 241 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7839 0.0 2.3472 1.0256
true 0.7587 0.0 6.9023 1.4644
  batch 242 batch_avg_loss: 0.32359927264619465
  batch 242 loss: 0.28926384449005127
  batch 242 loss_avg: 0.34342727065086365
  batch 242 loss_zero: 0.9190570116043091
  batch 242 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7873 0.0 2.6817 1.0217
true 0.7959 0.0 5.8516 1.5288
  batch 243 batch_avg_loss: 0.32349656736899796
  batch 243 loss: 0.2986418902873993
  batch 243 loss_avg: 0.377036988735199
  batch 243 loss_zero: 1.0104310512542725
  batch 243 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7952 0.0 2.3269 1.095
true 0.7495 0.0 4.0117 1.4663
  batch 244 batch_avg_loss: 0.3232227528437239
  batch 244 loss: 0.2566858232021332
  batch 244 loss_avg: 0.2889554798603058
  batch 244 loss_zero: 0.8507251143455505
  batch 244 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7801 0.0 2.3677 1.0581
true 0.7218 0.0 5.3281 1.4512
  batch 245 batch_avg_loss: 0.3230248125231996
  batch 245 loss: 0.27472737431526184
  batch 245 loss_avg: 0.33408570289611816
  batch 245 loss_zero: 0.8550644516944885
  batch 245 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7507 0.0 2.7369 0.9725
true 0.766 0.0 4.5859 1.4722
  batch 246 batch_avg_loss: 0.32272345154750637
  batch 246 loss: 0.2488900125026703
  batch 246 loss_avg: 0.29489943385124207
  batch 246 loss_zero: 0.8817241787910461
  batch 246 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7293 0.0 2.4935 0.9299
true 0.8135 0.0 5.5586 1.5449
  batch 247 batch_avg_loss: 0.32272501935360404
  batch 247 loss: 0.3231106996536255
  batch 247 loss_avg: 0.36278036236763
  batch 247 loss_zero: 1.0244834423065186
  batch 247 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7309 0.0 2.2146 0.9407
true 0.7918 0.0 5.2422 1.541
  batch 248 batch_avg_loss: 0.32265948516226584
  batch 248 loss: 0.3064725399017334
  batch 248 loss_avg: 0.3722136318683624
  batch 248 loss_zero: 0.9991694688796997
  batch 248 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7538 0.0 2.4999 1.0155
true 0.7655 0.0 6.9141 1.5312
  batch 249 batch_avg_loss: 0.322562770431779
  batch 249 loss: 0.29857751727104187
  batch 249 loss_avg: 0.3807605803012848
  batch 249 loss_zero: 0.9667967557907104
  batch 249 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7869 0.0 2.5057 1.0166
true 0.8389 0.0 5.5312 1.5513
  batch 250 batch_avg_loss: 0.32246481215953826
  batch 250 loss: 0.2980732023715973
  batch 250 loss_avg: 0.34157130122184753
  batch 250 loss_zero: 1.0453007221221924
  batch 250 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8307 0.0 1.9125 1.1172
true 0.7451 0.0 4.0078 1.4746
  batch 251 batch_avg_loss: 0.32224578912039675
  batch 251 loss: 0.267490029335022
  batch 251 loss_avg: 0.32804709672927856
  batch 251 loss_zero: 0.8832145929336548
  batch 251 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8414 0.0 2.4871 1.1364
true 0.8083 0.0 6.3125 1.502
  batch 252 batch_avg_loss: 0.3221804643907244
  batch 252 loss: 0.3057839572429657
  batch 252 loss_avg: 0.3473551869392395
  batch 252 loss_zero: 1.0006300210952759
  batch 252 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8353 0.0 2.5393 1.1544
true 0.8215 0.0 3.8555 1.5508
  batch 253 batch_avg_loss: 0.3220116328816169
  batch 253 loss: 0.27946609258651733
  batch 253 loss_avg: 0.3301919400691986
  batch 253 loss_zero: 1.0050734281539917
  batch 253 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8213 0.0 2.2096 1.1516
true 0.7759 0.0 6.5039 1.4834
  batch 254 batch_avg_loss: 0.3219847195730435
  batch 254 loss: 0.3151756525039673
  batch 254 loss_avg: 0.3793095648288727
  batch 254 loss_zero: 0.9812952280044556
  batch 254 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7941 0.0 2.175 1.1057
true 0.7682 0.0 5.7891 1.4707
  batch 255 batch_avg_loss: 0.3217687794975206
  batch 255 loss: 0.2669200003147125
  batch 255 loss_avg: 0.32662126421928406
  batch 255 loss_zero: 0.9167918562889099
  batch 255 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7642 0.0 2.1255 1.0722
true 0.7405 0.0 4.1133 1.4409
  batch 256 batch_avg_loss: 0.32150171895045787
  batch 256 loss: 0.2534012794494629
  batch 256 loss_avg: 0.29791346192359924
  batch 256 loss_zero: 0.8463165760040283
  batch 256 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.732 0.0 2.18 1.0229
true 0.782 0.0 7.2734 1.5586
  batch 257 batch_avg_loss: 0.3215415127546407
  batch 257 loss: 0.3317287266254425
  batch 257 loss_avg: 0.4217034876346588
  batch 257 loss_zero: 1.0332098007202148
  batch 257 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7227 0.0 1.9695 1.039
true 0.6782 0.0 4.0664 1.3984
/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/site-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([47, 104])) that is different to the input size (torch.Size([])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000002e09cb65a00000131'
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000002a097f5dc00000130'
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000002c049803b00000133'
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000002802f69a300000132'
  batch 258 batch_avg_loss: 0.32118183432161346
  batch 258 loss: 0.2287444770336151
  batch 258 loss_avg: 0.294725239276886
  batch 258 loss_zero: 0.7546690702438354
  batch 258 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.708 0.0 1.8106 1.0182
true 0.8203 0.0 5.4922 1.5391
  batch 259 batch_avg_loss: 0.32114327218541766
  batch 259 loss: 0.3111942410469055
  batch 259 loss_avg: 0.34756743907928467
  batch 259 loss_zero: 1.020485281944275
  batch 259 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.718 0.0 1.6106 1.04
true 0.711 0.0 4.1445 1.4243
  batch 260 batch_avg_loss: 0.3209206057282595
  batch 260 loss: 0.2632499933242798
  batch 260 loss_avg: 0.3104305863380432
  batch 260 loss_zero: 0.8159795999526978
  batch 260 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7251 0.0 2.3896 1.0075
true 0.8187 0.0 6.1016 1.5117
  batch 261 batch_avg_loss: 0.3209066567978183
  batch 261 loss: 0.3172799348831177
  batch 261 loss_avg: 0.34974217414855957
  batch 261 loss_zero: 1.0200262069702148
  batch 261 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7516 0.0 1.8846 1.0478
true 0.7597 0.0 4.668 1.4863
  batch 262 batch_avg_loss: 0.3207655685548564
  batch 262 loss: 0.2839415371417999
  batch 262 loss_avg: 0.34731531143188477
  batch 262 loss_zero: 0.9244731664657593
  batch 262 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7765 0.0 2.1529 1.0772
true 0.7965 0.0 6.3281 1.5
  batch 263 batch_avg_loss: 0.3205894788181827
  batch 263 loss: 0.2744539678096771
  batch 263 loss_avg: 0.3386363685131073
  batch 263 loss_zero: 0.9730514287948608
  batch 263 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8062 0.0 1.7235 1.1038
true 0.6866 0.0 3.959 1.3926
  batch 264 batch_avg_loss: 0.32033349788098625
  batch 264 loss: 0.25301051139831543
  batch 264 loss_avg: 0.2924068570137024
  batch 264 loss_zero: 0.7637854814529419
  batch 264 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7925 0.0 2.0941 1.0541
true 0.7953 0.0 4.7266 1.5088
  batch 265 batch_avg_loss: 0.32017472082713866
  batch 265 loss: 0.2782575786113739
  batch 265 loss_avg: 0.3321634829044342
  batch 265 loss_zero: 0.9645955562591553
  batch 265 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7823 0.0 1.7412 1.0099
true 0.7465 0.0 3.7578 1.4468
  batch 266 batch_avg_loss: 0.31987889458362323
  batch 266 loss: 0.24148494005203247
  batch 266 loss_avg: 0.2844705283641815
  batch 266 loss_zero: 0.8416639566421509
  batch 266 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7621 0.0 1.5643 0.9947
true 0.6889 0.0 4.3086 1.3857
  batch 267 batch_avg_loss: 0.31957791488938564
  batch 267 loss: 0.23951731622219086
  batch 267 loss_avg: 0.2826513946056366
  batch 267 loss_zero: 0.7571908831596375
  batch 267 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7285 0.0 1.621 0.9323
true 0.8024 0.0 6.8867 1.5391
  batch 268 batch_avg_loss: 0.3194497919905542
  batch 268 loss: 0.2852409780025482
  batch 268 loss_avg: 0.34449660778045654
  batch 268 loss_zero: 0.9884159564971924
  batch 268 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7209 0.0 1.8997 0.9141
true 0.7583 0.0 4.6953 1.4673
  batch 269 batch_avg_loss: 0.3192948923345835
  batch 269 loss: 0.27778178453445435
  batch 269 loss_avg: 0.3313440978527069
  batch 269 loss_zero: 0.9063308238983154
  batch 269 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7226 0.0 1.5262 0.9507
true 0.7337 0.0 4.1484 1.4453
  batch 270 batch_avg_loss: 0.31904812372393077
  batch 270 loss: 0.2526673674583435
  batch 270 loss_avg: 0.29662221670150757
  batch 270 loss_zero: 0.8348749279975891
  batch 270 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7327 0.0 1.7985 0.9306
true 0.7728 0.0 4.2305 1.5044
  batch 271 batch_avg_loss: 0.3188338570599186
  batch 271 loss: 0.26098185777664185
  batch 271 loss_avg: 0.3170726001262665
  batch 271 loss_zero: 0.9142240881919861
  batch 271 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7456 0.0 2.8428 0.9785
true 0.7348 0.0 6.3125 1.4341
  batch 272 batch_avg_loss: 0.31871624515556235
  batch 272 loss: 0.2868434190750122
  batch 272 loss_avg: 0.3359073996543884
  batch 272 loss_zero: 0.87583327293396
  batch 272 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7561 0.0 2.0663 1.0154
true 0.7232 0.0 4.2305 1.4355
  batch 273 batch_avg_loss: 0.31853142866503187
  batch 273 loss: 0.2682613432407379
  batch 273 loss_avg: 0.3160037398338318
  batch 273 loss_zero: 0.8390923738479614
  batch 273 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7544 0.0 1.9433 1.0459
true 0.7747 0.0 6.6367 1.4922
  batch 274 batch_avg_loss: 0.31855645117751
  batch 274 loss: 0.3253875970840454
  batch 274 loss_avg: 0.378135085105896
  batch 274 loss_zero: 0.9782218337059021
  batch 274 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7555 0.0 2.1725 1.0562
true 0.7729 0.0 4.8047 1.4707
  batch 275 batch_avg_loss: 0.31841982424259185
  batch 275 loss: 0.2809840440750122
  batch 275 loss_avg: 0.3378012180328369
  batch 275 loss_zero: 0.9351333975791931
  batch 275 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7596 0.0 2.3112 1.0261
true 0.7917 0.0 5.9141 1.5146
  batch 276 batch_avg_loss: 0.3182683679396692
  batch 276 loss: 0.2766178846359253
  batch 276 loss_avg: 0.3496401011943817
  batch 276 loss_zero: 0.9764448404312134
  batch 276 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7699 0.0 2.4352 1.0692
true 0.7484 0.0 7.3359 1.4819
  batch 277 batch_avg_loss: 0.3182303674707344
  batch 277 loss: 0.30774223804473877
  batch 277 loss_avg: 0.3937957286834717
  batch 277 loss_zero: 0.953962504863739
  batch 277 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7781 0.0 2.2179 1.0855
true 0.7757 0.0 4.6875 1.4727
  batch 278 batch_avg_loss: 0.3180477320611906
  batch 278 loss: 0.2674577236175537
  batch 278 loss_avg: 0.30839964747428894
  batch 278 loss_zero: 0.9100395441055298
  batch 278 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7747 0.0 2.9984 1.0972
true 0.743 0.0 4.9023 1.4609
  batch 279 batch_avg_loss: 0.3178970467125643
  batch 279 loss: 0.2760065197944641
  batch 279 loss_avg: 0.32167530059814453
  batch 279 loss_zero: 0.8736981749534607
  batch 279 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7627 0.0 2.0496 1.0903
true 0.8135 0.0 6.0078 1.5312
  batch 280 batch_avg_loss: 0.31787659956940584
  batch 280 loss: 0.3121718466281891
  batch 280 loss_avg: 0.37598559260368347
  batch 280 loss_zero: 1.0377202033996582
  batch 280 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7607 0.0 1.8076 1.0598
true 0.7882 0.0 4.4414 1.4531
  batch 281 batch_avg_loss: 0.31760055420661737
  batch 281 loss: 0.24030785262584686
  batch 281 loss_avg: 0.2726869583129883
  batch 281 loss_zero: 0.8938829302787781
  batch 281 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7636 0.0 2.2459 1.0291
true 0.7951 0.0 6.6875 1.52
  batch 282 batch_avg_loss: 0.3174287584867883
  batch 282 loss: 0.2691541612148285
  batch 282 loss_avg: 0.3422611951828003
  batch 282 loss_zero: 0.9743756055831909
  batch 282 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7781 0.0 2.7106 1.0186
true 0.7415 0.0 7.7188 1.4731
  batch 283 batch_avg_loss: 0.31731960198483283
  batch 283 loss: 0.2865374684333801
  batch 283 loss_avg: 0.3680076599121094
  batch 283 loss_zero: 0.9177988767623901
  batch 283 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.788 0.0 1.9628 1.0689
true 0.7856 0.0 7.2031 1.4854
  batch 284 batch_avg_loss: 0.31716982485123085
  batch 284 loss: 0.2747828960418701
  batch 284 loss_avg: 0.3410205543041229
  batch 284 loss_zero: 0.9581476449966431
  batch 284 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7988 0.0 2.3188 1.1127
true 0.8027 0.0 8.3359 1.5391
  batch 285 batch_avg_loss: 0.3171302093748461
  batch 285 loss: 0.3058794140815735
  batch 285 loss_avg: 0.3758560121059418
  batch 285 loss_zero: 1.0202525854110718
  batch 285 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8108 0.0 2.4216 1.1339
true 0.7824 0.0 4.9062 1.4893
  batch 286 batch_avg_loss: 0.3169683404527344
  batch 286 loss: 0.2708356976509094
  batch 286 loss_avg: 0.3227381408214569
  batch 286 loss_zero: 0.9349185228347778
  batch 286 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8111 0.0 3.1504 1.1433
true 0.8376 0.0 4.8867 1.5996
  batch 287 batch_avg_loss: 0.3169156406399265
  batch 287 loss: 0.3018434941768646
  batch 287 loss_avg: 0.39113351702690125
  batch 287 loss_zero: 1.092660665512085
  batch 287 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.822 0.0 3.0482 1.1821
true 0.73 0.0 5.1445 1.4297
  batch 288 batch_avg_loss: 0.3167174519557092
  batch 288 loss: 0.2598372995853424
  batch 288 loss_avg: 0.3142797648906708
  batch 288 loss_zero: 0.8471843004226685
  batch 288 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8007 0.0 2.9057 1.1171
true 0.8269 0.0 5.4141 1.5659
  batch 289 batch_avg_loss: 0.31660599970487574
  batch 289 loss: 0.28450775146484375
  batch 289 loss_avg: 0.35422107577323914
  batch 289 loss_zero: 1.0380408763885498
  batch 289 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7866 0.0 2.5542 1.0919
true 0.7476 0.0 5.8789 1.4805
  batch 290 batch_avg_loss: 0.31643064186490816
  batch 290 loss: 0.26575222611427307
  batch 290 loss_avg: 0.35982948541641235
  batch 290 loss_zero: 0.9186712503433228
  batch 290 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7696 0.0 2.2235 1.0672
true 0.7451 0.0 6.75 1.4297
  batch 291 batch_avg_loss: 0.31626828941692603
  batch 291 loss: 0.2691860795021057
  batch 291 loss_avg: 0.3161013722419739
  batch 291 loss_zero: 0.8713153004646301
  batch 291 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7443 0.0 2.1066 1.0474
true 0.7773 0.0 5.1875 1.4912
  batch 292 batch_avg_loss: 0.31610417202727437
  batch 292 loss: 0.26834601163864136
  batch 292 loss_avg: 0.3209874927997589
  batch 292 loss_zero: 0.9252576231956482
  batch 292 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.728 0.0 2.0921 1.022
true 0.7596 0.0 3.8887 1.4556
  batch 293 batch_avg_loss: 0.31582881550943487
  batch 293 loss: 0.2354247123003006
  batch 293 loss_avg: 0.27426081895828247
  batch 293 loss_zero: 0.8511816263198853
  batch 293 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7192 0.0 1.8014 0.9915
true 0.7749 0.0 4.7227 1.4941
  batch 294 batch_avg_loss: 0.3156288378194076
  batch 294 loss: 0.25703537464141846
  batch 294 loss_avg: 0.31895118951797485
  batch 294 loss_zero: 0.9194352626800537
  batch 294 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7267 0.0 2.1255 0.979
true 0.7789 0.0 6.6875 1.4854
  batch 295 batch_avg_loss: 0.315518341983779
  batch 295 loss: 0.2830325663089752
  batch 295 loss_avg: 0.3420802354812622
  batch 295 loss_zero: 0.94869065284729
  batch 295 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7464 0.0 2.0544 0.9794
true 0.7857 0.0 5.8672 1.498
  batch 296 batch_avg_loss: 0.3153002975458229
  batch 296 loss: 0.25097718834877014
  batch 296 loss_avg: 0.3228040337562561
  batch 296 loss_zero: 0.9401617646217346
  batch 296 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7746 0.0 1.9634 1.0472
true 0.7288 0.0 3.6699 1.4209
  batch 297 batch_avg_loss: 0.3150145391924213
  batch 297 loss: 0.23043006658554077
  batch 297 loss_avg: 0.27927741408348083
  batch 297 loss_zero: 0.8104460835456848
  batch 297 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7919 0.0 2.2466 1.0636
true 0.7933 0.0 4.5391 1.5112
  batch 298 batch_avg_loss: 0.31479737007577946
  batch 298 loss: 0.2502981424331665
  batch 298 loss_avg: 0.314349502325058
  batch 298 loss_zero: 0.9436126351356506
  batch 298 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8046 0.0 2.4056 1.0579
true 0.7934 0.0 5.168 1.5176
  batch 299 batch_avg_loss: 0.3146782097310127
  batch 299 loss: 0.27916842699050903
  batch 299 loss_avg: 0.34836065769195557
  batch 299 loss_zero: 0.9778364896774292
  batch 299 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8104 0.0 2.6665 1.0861
true 0.7683 0.0 4.8281 1.4922
  batch 300 batch_avg_loss: 0.3144670377671719
  batch 300 loss: 0.25132662057876587
  batch 300 loss_avg: 0.30829739570617676
  batch 300 loss_zero: 0.8985685706138611
  batch 300 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8025 0.0 2.7962 1.0672
true 0.8012 0.0 5.9766 1.5117
  batch 301 batch_avg_loss: 0.3143882730177471
  batch 301 loss: 0.2907588481903076
  batch 301 loss_avg: 0.3578715920448303
  batch 301 loss_zero: 0.9997800588607788
  batch 301 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7911 0.0 2.9687 1.0793
true 0.7744 0.0 6.6328 1.4785
  batch 302 batch_avg_loss: 0.3143185761491984
  batch 302 loss: 0.2933398187160492
  batch 302 loss_avg: 0.34672683477401733
  batch 302 loss_zero: 0.9464332461357117
  batch 302 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7755 0.0 2.9147 1.0503
true 0.7335 0.0 5.6172 1.4624
  batch 303 batch_avg_loss: 0.31415522250995387
  batch 303 loss: 0.26482242345809937
  batch 303 loss_avg: 0.33062106370925903
  batch 303 loss_zero: 0.8685771822929382
  batch 303 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7474 0.0 2.3212 1.0476
true 0.7708 0.0 4.6875 1.4946
  batch 304 batch_avg_loss: 0.3139870834879969
  batch 304 loss: 0.2630409598350525
  batch 304 loss_avg: 0.3088207244873047
  batch 304 loss_zero: 0.9029183983802795
  batch 304 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7277 0.0 2.6353 0.9865
true 0.7705 0.0 4.0938 1.5317
  batch 305 batch_avg_loss: 0.31387327416021316
  batch 305 loss: 0.27927523851394653
  batch 305 loss_avg: 0.3532227873802185
  batch 305 loss_zero: 0.9468632340431213
  batch 305 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7248 0.0 3.0502 1.0023
true 0.751 0.0 4.8828 1.4736
  batch 306 batch_avg_loss: 0.3137115650609428
  batch 306 loss: 0.2643902897834778
  batch 306 loss_avg: 0.3234560787677765
  batch 306 loss_zero: 0.8874905705451965
  batch 306 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7297 0.0 3.0411 0.968
true 0.8085 0.0 4.6367 1.5371
  batch 307 batch_avg_loss: 0.3135636293053239
  batch 307 loss: 0.2682952880859375
  batch 307 loss_avg: 0.32549920678138733
  batch 307 loss_zero: 0.9792051911354065
  batch 307 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7553 0.0 2.5717 0.9948
true 0.7496 0.0 4.8711 1.4614
  batch 308 batch_avg_loss: 0.31341589305114437
  batch 308 loss: 0.2680608630180359
  batch 308 loss_avg: 0.32486894726753235
  batch 308 loss_zero: 0.8866980671882629
  batch 308 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7773 0.0 1.9751 1.0766
true 0.8042 0.0 6.6562 1.5352
  batch 309 batch_avg_loss: 0.3133805091809301
  batch 309 loss: 0.3024822771549225
  batch 309 loss_avg: 0.36948853731155396
  batch 309 loss_zero: 1.016191840171814
  batch 309 loss_ideal: 0.0
  torch.Size([47, 10400, 4])
  torch.Size([47, 104])
torch.Size([24, 4, 10400])
torch.Size([24, 64, 104])
torch.Size([23, 4, 10400])
torch.Size([23, 64, 104])
torch.Size([24, 64, 104])
torch.Size([24, 104])
torch.Size([23, 64, 104])
torch.Size([23, 104])
pred 0.8018 0.0 1.9872 1.0975
true 0.7973 0.0 7.4219 1.5318
  batch 310 batch_avg_loss: 0.3134758758448785
  batch 310 loss: 0.3429441750049591
  batch 310 loss_avg: 0.39187026023864746
  batch 310 loss_zero: 1.0276179313659668
  batch 310 loss_ideal: 0.0
  LOSS train = 0.3134758758448785 validation = 0.3134758758448785

EPOCH 1/1
  Training (seq):

  #### Num of Batches ####
  New chopped_genome_dataset_loader = 310

  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8244 0.0 2.7333 1.0818
true 0.8011 0.0 6.1484 1.5146
  batch 1 batch_avg_loss: 0.2918154001235962
  batch 1 loss: 0.2918154001235962
  batch 1 loss_avg: 0.3687163293361664
  batch 1 loss_zero: 1.0104767084121704
  batch 1 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8326 0.0 2.6499 1.115
true 0.7461 0.0 7.7188 1.4399
  batch 2 batch_avg_loss: 0.298543319106102
  batch 2 loss: 0.3052712380886078
  batch 2 loss_avg: 0.34843283891677856
  batch 2 loss_zero: 0.9050633907318115
  batch 2 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8152 0.0 2.2756 1.1219
true 0.7551 0.0 6.0156 1.4883
  batch 3 batch_avg_loss: 0.28649776180585224
  batch 3 loss: 0.2624066472053528
  batch 3 loss_avg: 0.3325363099575043
  batch 3 loss_zero: 0.9027826189994812
  batch 3 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7883 0.0 2.2473 1.0448
true 0.7859 0.0 6.3906 1.4941
  batch 4 batch_avg_loss: 0.2857642397284508
  batch 4 loss: 0.28356367349624634
  batch 4 loss_avg: 0.3336651921272278
  batch 4 loss_zero: 0.9512536525726318
  batch 4 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7638 0.0 1.9122 1.0163
true 0.7718 0.0 6.8867 1.4795
  batch 5 batch_avg_loss: 0.28376478552818296
  batch 5 loss: 0.2757669687271118
  batch 5 loss_avg: 0.327068954706192
  batch 5 loss_zero: 0.9226794838905334
  batch 5 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7444 0.0 1.8022 0.9749
true 0.7756 0.0 4.4375 1.4922
  batch 6 batch_avg_loss: 0.28244616587956745
  batch 6 loss: 0.27585306763648987
  batch 6 loss_avg: 0.3159061074256897
  batch 6 loss_zero: 0.9174530506134033
  batch 6 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7312 0.0 1.8736 0.9506
true 0.7672 0.0 8.3359 1.5098
  batch 7 batch_avg_loss: 0.28531181812286377
  batch 7 loss: 0.3025057315826416
  batch 7 loss_avg: 0.3678450286388397
  batch 7 loss_zero: 0.9564481973648071
  batch 7 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7296 0.0 1.9116 0.9677
true 0.8011 0.0 5.7812 1.5513
  batch 8 batch_avg_loss: 0.2886026054620743
  batch 8 loss: 0.31163811683654785
  batch 8 loss_avg: 0.38418319821357727
  batch 8 loss_zero: 1.025882601737976
  batch 8 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7462 0.0 1.9943 0.9977
true 0.8071 0.0 5.2617 1.5581
  batch 9 batch_avg_loss: 0.2877928250365787
  batch 9 loss: 0.28131458163261414
  batch 9 loss_avg: 0.35331830382347107
  batch 9 loss_zero: 1.004655122756958
  batch 9 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7787 0.0 2.2995 1.0706
true 0.7523 0.0 5.2031 1.4893
  batch 10 batch_avg_loss: 0.2867905229330063
  batch 10 loss: 0.2777698040008545
  batch 10 loss_avg: 0.3519099950790405
  batch 10 loss_zero: 0.917793333530426
  batch 10 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8039 0.0 1.8676 1.1419
true 0.7851 0.0 5.1719 1.5151
  batch 11 batch_avg_loss: 0.2855308543552052
  batch 11 loss: 0.2729341685771942
  batch 11 loss_avg: 0.3380397856235504
  batch 11 loss_zero: 0.9543472528457642
  batch 11 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8168 0.0 2.7426 1.122
true 0.8056 0.0 5.1094 1.5146
  batch 12 batch_avg_loss: 0.28522132833798725
  batch 12 loss: 0.2818165421485901
  batch 12 loss_avg: 0.3455793857574463
  batch 12 loss_zero: 0.9946341514587402
  batch 12 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8306 0.0 2.1713 1.1964
true 0.7429 0.0 4.2266 1.4614
  batch 13 batch_avg_loss: 0.2830100884804359
  batch 13 loss: 0.25647521018981934
  batch 13 loss_avg: 0.30690261721611023
  batch 13 loss_zero: 0.8587964177131653
  batch 13 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8043 0.0 2.8465 1.1378
true 0.7865 0.0 8.6562 1.5093
  batch 14 batch_avg_loss: 0.28539858758449554
  batch 14 loss: 0.3164490759372711
  batch 14 loss_avg: 0.41368523240089417
  batch 14 loss_zero: 1.0322792530059814
  batch 14 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.777 0.0 2.7159 1.1117
true 0.8801 0.0 6.3438 1.6548
  batch 15 batch_avg_loss: 0.2885402242342631
  batch 15 loss: 0.3325231373310089
  batch 15 loss_avg: 0.4319796860218048
  batch 15 loss_zero: 1.20661461353302
  batch 15 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7787 0.0 1.9629 1.1578
true 0.7332 0.0 5.2188 1.4707
  batch 16 batch_avg_loss: 0.2862942684441805
  batch 16 loss: 0.2526049315929413
  batch 16 loss_avg: 0.3185364902019501
  batch 16 loss_zero: 0.8560548424720764
  batch 16 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.768 0.0 1.9178 1.1354
true 0.7901 0.0 7.3867 1.4736
  batch 17 batch_avg_loss: 0.28626978397369385
  batch 17 loss: 0.2858780324459076
  batch 17 loss_avg: 0.3340499699115753
  batch 17 loss_zero: 0.9583604335784912
  batch 17 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7609 0.0 1.7729 1.0555
true 0.7432 0.0 3.9766 1.439
  batch 18 batch_avg_loss: 0.2837471283144421
  batch 18 loss: 0.24086198210716248
  batch 18 loss_avg: 0.2879636585712433
  batch 18 loss_zero: 0.8403509855270386
  batch 18 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7434 0.0 2.7053 0.9981
true 0.7499 0.0 5.2422 1.4824
  batch 19 batch_avg_loss: 0.28312195602216217
  batch 19 loss: 0.27186885476112366
  batch 19 loss_avg: 0.3554329574108124
  batch 19 loss_zero: 0.9177864193916321
  batch 19 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7344 0.0 2.0147 0.9635
true 0.7837 0.0 4.3984 1.4902
  batch 20 batch_avg_loss: 0.2826908573508263
  batch 20 loss: 0.2744999825954437
  batch 20 loss_avg: 0.33555883169174194
  batch 20 loss_zero: 0.9497436285018921
  batch 20 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.736 0.0 1.6938 0.9845
true 0.7706 0.0 5.2812 1.4409
  batch 21 batch_avg_loss: 0.28080886673359645
  batch 21 loss: 0.24316905438899994
  batch 21 loss_avg: 0.28853872418403625
  batch 21 loss_zero: 0.8824179172515869
  batch 21 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7442 0.0 1.7816 0.9695
true 0.7749 0.0 5.6172 1.5088
  batch 22 batch_avg_loss: 0.2804334671659903
  batch 22 loss: 0.2725500762462616
  batch 22 loss_avg: 0.3435303866863251
  batch 22 loss_zero: 0.9439958930015564
  batch 22 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7586 0.0 1.639 1.0057
true 0.6827 0.0 3.6719 1.3779
  batch 23 batch_avg_loss: 0.2782790174950724
  batch 23 loss: 0.23088112473487854
  batch 23 loss_avg: 0.2762395143508911
  batch 23 loss_zero: 0.7423779964447021
  batch 23 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7603 0.0 1.8063 1.0037
true 0.7575 0.0 6.7578 1.4824
  batch 24 batch_avg_loss: 0.27860461734235287
  batch 24 loss: 0.28609341382980347
  batch 24 loss_avg: 0.34126564860343933
  batch 24 loss_zero: 0.9150348901748657
  batch 24 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.76 0.0 1.6569 1.0053
true 0.762 0.0 7.3867 1.4482
  batch 25 batch_avg_loss: 0.2796397215127945
  batch 25 loss: 0.30448222160339355
  batch 25 loss_avg: 0.35899272561073303
  batch 25 loss_zero: 0.9396380186080933
  batch 25 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7589 0.0 2.0998 1.0111
true 0.7556 0.0 5.4922 1.457
  batch 26 batch_avg_loss: 0.2798796141376862
  batch 26 loss: 0.28587692975997925
  batch 26 loss_avg: 0.32760533690452576
  batch 26 loss_zero: 0.8985311388969421
  batch 26 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7583 0.0 2.215 1.0106
true 0.7578 0.0 3.6289 1.437
  batch 27 batch_avg_loss: 0.2783570499331863
  batch 27 loss: 0.23877038061618805
  batch 27 loss_avg: 0.27849531173706055
  batch 27 loss_zero: 0.8527064323425293
  batch 27 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7535 0.0 1.8589 0.9878
true 0.7236 0.0 4.1875 1.4165
  batch 28 batch_avg_loss: 0.2769217996725014
  batch 28 loss: 0.23817004263401031
  batch 28 loss_avg: 0.3047277629375458
  batch 28 loss_zero: 0.8283081650733948
  batch 28 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7456 0.0 2.3172 0.9672
true 0.7339 0.0 6.3359 1.4248
  batch 29 batch_avg_loss: 0.27718154058374206
  batch 29 loss: 0.2844542860984802
  batch 29 loss_avg: 0.3365374803543091
  batch 29 loss_zero: 0.8751800656318665
  batch 29 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7356 0.0 2.2083 0.9708
true 0.759 0.0 7.2734 1.4453
  batch 30 batch_avg_loss: 0.2771322573224703
  batch 30 loss: 0.2757030427455902
  batch 30 loss_avg: 0.32200300693511963
  batch 30 loss_zero: 0.8981544971466064
  batch 30 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.73 0.0 1.9312 0.9892
true 0.7589 0.0 6.6797 1.4668
  batch 31 batch_avg_loss: 0.2767118085776606
  batch 31 loss: 0.2640983462333679
  batch 31 loss_avg: 0.317343533039093
  batch 31 loss_zero: 0.8932143449783325
  batch 31 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.731 0.0 2.1761 0.9806
true 0.7849 0.0 6.3906 1.5
  batch 32 batch_avg_loss: 0.277425202075392
  batch 32 loss: 0.2995404005050659
  batch 32 loss_avg: 0.34214961528778076
  batch 32 loss_zero: 0.9582489132881165
  batch 32 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.741 0.0 3.5542 0.9567
true 0.7848 0.0 5.6172 1.564
  batch 33 batch_avg_loss: 0.27827021976312
  batch 33 loss: 0.30531078577041626
  batch 33 loss_avg: 0.3864784240722656
  batch 33 loss_zero: 1.002414584159851
  batch 33 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7608 0.0 2.2665 1.0193
true 0.7837 0.0 5.8125 1.52
  batch 34 batch_avg_loss: 0.27773144008482203
  batch 34 loss: 0.25995171070098877
  batch 34 loss_avg: 0.3500417470932007
  batch 34 loss_zero: 0.9642446041107178
  batch 34 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7884 0.0 1.9514 1.1197
true 0.7626 0.0 4.9297 1.4512
  batch 35 batch_avg_loss: 0.277198800444603
  batch 35 loss: 0.25908905267715454
  batch 35 loss_avg: 0.3036334216594696
  batch 35 loss_zero: 0.8851717710494995
  batch 35 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8037 0.0 2.4541 1.1149
true 0.723 0.0 4.5859 1.4761
  batch 36 batch_avg_loss: 0.27677115839388633
  batch 36 loss: 0.26180368661880493
  batch 36 loss_avg: 0.3382505476474762
  batch 36 loss_zero: 0.8609477877616882
  batch 36 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8006 0.0 2.5363 1.1041
true 0.8073 0.0 6.6875 1.5234
  batch 37 batch_avg_loss: 0.2788191780045226
  batch 37 loss: 0.35254788398742676
  batch 37 loss_avg: 0.4294200539588928
  batch 37 loss_zero: 1.0811221599578857
  batch 37 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8014 0.0 3.0493 1.0967
true 0.7558 0.0 4.7812 1.4541
  batch 38 batch_avg_loss: 0.2782984521043928
  batch 38 loss: 0.25903159379959106
  batch 38 loss_avg: 0.3048045337200165
  batch 38 loss_zero: 0.8759883046150208
  batch 38 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7795 0.0 1.8826 1.1074
true 0.7711 0.0 7.4844 1.4902
  batch 39 batch_avg_loss: 0.27881722228649336
  batch 39 loss: 0.2985304892063141
  batch 39 loss_avg: 0.3750495910644531
  batch 39 loss_zero: 0.9696506261825562
  batch 39 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7658 0.0 2.0752 1.0703
true 0.7296 0.0 5.375 1.439
  batch 40 batch_avg_loss: 0.2782535184174776
  batch 40 loss: 0.25626906752586365
  batch 40 loss_avg: 0.32169467210769653
  batch 40 loss_zero: 0.8539474606513977
  batch 40 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7407 0.0 1.8699 1.0282
true 0.789 0.0 5.2109 1.5117
  batch 41 batch_avg_loss: 0.2782817537464747
  batch 41 loss: 0.2794111669063568
  batch 41 loss_avg: 0.36680495738983154
  batch 41 loss_zero: 0.9892941117286682
  batch 41 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7307 0.0 1.7127 1.0316
true 0.7515 0.0 4.3281 1.4766
  batch 42 batch_avg_loss: 0.2777965774848348
  batch 42 loss: 0.2579043507575989
  batch 42 loss_avg: 0.32617002725601196
  batch 42 loss_zero: 0.8908476233482361
  batch 42 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7271 0.0 1.6892 0.9853
true 0.8009 0.0 5.8789 1.5586
  batch 43 batch_avg_loss: 0.27804116904735565
  batch 43 loss: 0.28831401467323303
  batch 43 loss_avg: 0.3802245259284973
  batch 43 loss_zero: 1.021610140800476
  batch 43 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7408 0.0 1.7144 1.0245
true 0.7133 0.0 6.8477 1.4141
  batch 44 batch_avg_loss: 0.2772145190022208
  batch 44 loss: 0.24166856706142426
  batch 44 loss_avg: 0.30304214358329773
  batch 44 loss_zero: 0.8119102120399475
  batch 44 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7465 0.0 1.7684 1.0445
true 0.7851 0.0 5.1172 1.5122
  batch 45 batch_avg_loss: 0.2770635154512193
  batch 45 loss: 0.2704193592071533
  batch 45 loss_avg: 0.33562400937080383
  batch 45 loss_zero: 0.9519716501235962
  batch 45 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7593 0.0 1.8828 1.0586
true 0.801 0.0 4.7578 1.4814
  batch 46 batch_avg_loss: 0.2766349250855653
  batch 46 loss: 0.25734835863113403
  batch 46 loss_avg: 0.30280759930610657
  batch 46 loss_zero: 0.9444364309310913
  batch 46 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7783 0.0 1.9282 1.0709
true 0.754 0.0 3.9922 1.4336
  batch 47 batch_avg_loss: 0.2756864006849045
  batch 47 loss: 0.23205427825450897
  batch 47 loss_avg: 0.2681179940700531
  batch 47 loss_zero: 0.8365929126739502
  batch 47 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7799 0.0 2.014 1.0439
true 0.8188 0.0 6.3125 1.5435
  batch 48 batch_avg_loss: 0.27580254431813955
  batch 48 loss: 0.28126129508018494
  batch 48 loss_avg: 0.3728729486465454
  batch 48 loss_zero: 1.0433331727981567
  batch 48 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.791 0.0 1.6229 1.108
true 0.7538 0.0 6.2656 1.4346
  batch 49 batch_avg_loss: 0.27562042918740487
  batch 49 loss: 0.2668789029121399
  batch 49 loss_avg: 0.3098544776439667
  batch 49 loss_zero: 0.8781310319900513
  batch 49 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.793 0.0 2.3253 1.0567
true 0.8132 0.0 6.3281 1.5728
  batch 50 batch_avg_loss: 0.27639835387468337
  batch 50 loss: 0.31451666355133057
  batch 50 loss_avg: 0.41865819692611694
  batch 50 loss_zero: 1.0798918008804321
  batch 50 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8008 0.0 1.8838 1.084
true 0.8043 0.0 4.5391 1.499
  batch 51 batch_avg_loss: 0.27590729179335577
  batch 51 loss: 0.2513541877269745
  batch 51 loss_avg: 0.29865962266921997
  batch 51 loss_zero: 0.9455081224441528
  batch 51 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8064 0.0 1.9361 1.0766
true 0.8413 0.0 5.3828 1.5815
  batch 52 batch_avg_loss: 0.27622841843045676
  batch 52 loss: 0.2926058769226074
  batch 52 loss_avg: 0.3626924157142639
  batch 52 loss_zero: 1.0705304145812988
  batch 52 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.8183 0.0 2.0468 1.1152
true 0.7269 0.0 5.4453 1.4565
  batch 53 batch_avg_loss: 0.2757732516752099
  batch 53 loss: 0.25210458040237427
  batch 53 loss_avg: 0.31520596146583557
  batch 53 loss_zero: 0.8435298800468445
  batch 53 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.811 0.0 2.0031 1.1427
true 0.7725 0.0 4.7305 1.4697
  batch 54 batch_avg_loss: 0.27558333261145485
  batch 54 loss: 0.26551762223243713
  batch 54 loss_avg: 0.3192121982574463
  batch 54 loss_zero: 0.9160288572311401
  batch 54 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7945 0.0 2.9452 1.0931
true 0.7758 0.0 4.9297 1.4805
  batch 55 batch_avg_loss: 0.27548959282311525
  batch 55 loss: 0.2704276442527771
  batch 55 loss_avg: 0.3381153643131256
  batch 55 loss_zero: 0.9399508237838745
  batch 55 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7764 0.0 2.7893 1.0848
true 0.7769 0.0 6.5469 1.481
  batch 56 batch_avg_loss: 0.2753363892968212
  batch 56 loss: 0.266910195350647
  batch 56 loss_avg: 0.3476586937904358
  batch 56 loss_zero: 0.9512227773666382
  batch 56 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7618 0.0 2.6238 1.0787
true 0.7319 0.0 4.832 1.4746
  batch 57 batch_avg_loss: 0.2752361770784646
  batch 57 loss: 0.2696242928504944
  batch 57 loss_avg: 0.35820335149765015
  batch 57 loss_zero: 0.893813967704773
  batch 57 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7454 0.0 2.9483 1.0581
true 0.7566 0.0 5.9375 1.5
  batch 58 batch_avg_loss: 0.27498344126446495
  batch 58 loss: 0.2605774998664856
  batch 58 loss_avg: 0.3589475750923157
  batch 58 loss_zero: 0.9313781261444092
  batch 58 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7363 0.0 2.5867 1.0774
true 0.7903 0.0 6.418 1.502
  batch 59 batch_avg_loss: 0.27530221994650567
  batch 59 loss: 0.29379138350486755
  batch 59 loss_avg: 0.3671955466270447
  batch 59 loss_zero: 0.9917389154434204
  batch 59 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7375 0.0 2.1001 1.123
true 0.7506 0.0 5.7109 1.4785
  batch 60 batch_avg_loss: 0.2751966752111912
  batch 60 loss: 0.2689695358276367
  batch 60 loss_avg: 0.333585649728775
  batch 60 loss_zero: 0.8969175815582275
  batch 60 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7448 0.0 2.6817 1.0907
true 0.8087 0.0 4.8633 1.4976
  batch 61 batch_avg_loss: 0.27505515369235495
  batch 61 loss: 0.26656386256217957
  batch 61 loss_avg: 0.31902939081192017
  batch 61 loss_zero: 0.973041296005249
  batch 61 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7591 0.0 2.6621 1.1089
true 0.8228 0.0 5.6016 1.5854
  batch 62 batch_avg_loss: 0.2754385257440229
  batch 62 loss: 0.2988242208957672
  batch 62 loss_avg: 0.41334080696105957
  batch 62 loss_zero: 1.0902643203735352
  batch 62 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7931 0.0 2.9785 1.1334
true 0.8226 0.0 5.0469 1.5439
  batch 63 batch_avg_loss: 0.2752647993583528
  batch 63 loss: 0.26449376344680786
  batch 63 loss_avg: 0.3419429361820221
  batch 63 loss_zero: 1.0186848640441895
  batch 63 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8262 0.0 4.0065 1.1475
true 0.777 0.0 4.2656 1.4985
  batch 64 batch_avg_loss: 0.27474601147696376
  batch 64 loss: 0.24206237494945526
  batch 64 loss_avg: 0.31067806482315063
  batch 64 loss_zero: 0.9144018888473511
  batch 64 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8374 0.0 2.9768 1.1549
true 0.823 0.0 4.6719 1.5371
  batch 65 batch_avg_loss: 0.2747649472493392
  batch 65 loss: 0.27597683668136597
  batch 65 loss_avg: 0.3199877440929413
  batch 65 loss_zero: 0.9972345232963562
  batch 65 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.8357 0.0 3.2846 1.1232
true 0.8292 0.0 5.7891 1.5586
  batch 66 batch_avg_loss: 0.2752029791925893
  batch 66 loss: 0.3036750555038452
  batch 66 loss_avg: 0.34541502594947815
  batch 66 loss_zero: 1.0330657958984375
  batch 66 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8264 0.0 2.6491 1.1014
true 0.7485 0.0 5.7891 1.5039
  batch 67 batch_avg_loss: 0.27509224592749754
  batch 67 loss: 0.26778385043144226
  batch 67 loss_avg: 0.3708076477050781
  batch 67 loss_zero: 0.9310905933380127
  batch 67 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8055 0.0 2.5307 1.0211
true 0.7345 0.0 4.2344 1.4844
  batch 68 batch_avg_loss: 0.2748233829351032
  batch 68 loss: 0.2568095624446869
  batch 68 loss_avg: 0.3307619094848633
  batch 68 loss_zero: 0.8702785968780518
  batch 68 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7776 0.0 2.0563 0.995
true 0.8095 0.0 9.625 1.5645
  batch 69 batch_avg_loss: 0.2760863481224447
  batch 69 loss: 0.3619679808616638
  batch 69 loss_avg: 0.4413738548755646
  batch 69 loss_zero: 1.0967286825180054
  batch 69 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7621 0.0 2.2049 0.9876
true 0.7525 0.0 4.2344 1.481
  batch 70 batch_avg_loss: 0.27575163883822307
  batch 70 loss: 0.2526566982269287
  batch 70 loss_avg: 0.30638113617897034
  batch 70 loss_zero: 0.8725828528404236
  batch 70 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7488 0.0 2.1624 0.9538
true 0.8212 0.0 5.1445 1.5059
  batch 71 batch_avg_loss: 0.27543313108699424
  batch 71 loss: 0.25313758850097656
  batch 71 loss_avg: 0.2945081293582916
  batch 71 loss_zero: 0.9689580798149109
  batch 71 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7488 0.0 2.2466 0.9708
true 0.7976 0.0 5.9219 1.4922
  batch 72 batch_avg_loss: 0.2752837795350287
  batch 72 loss: 0.26467981934547424
  batch 72 loss_avg: 0.33294036984443665
  batch 72 loss_zero: 0.9690698385238647
  batch 72 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.76 0.0 2.2705 1.0137
true 0.8012 0.0 4.2109 1.5039
  batch 73 batch_avg_loss: 0.2751419948388452
  batch 73 loss: 0.2649334967136383
  batch 73 loss_avg: 0.3081481158733368
  batch 73 loss_zero: 0.9500340223312378
  batch 73 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7788 0.0 2.8241 1.0321
true 0.7815 0.0 5.582 1.5127
  batch 74 batch_avg_loss: 0.2750573073690002
  batch 74 loss: 0.2688751220703125
  batch 74 loss_avg: 0.33266428112983704
  batch 74 loss_zero: 0.9434207677841187
  batch 74 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7965 0.0 2.1733 1.1285
true 0.7772 0.0 4.2148 1.4971
  batch 75 batch_avg_loss: 0.27487308184305825
  batch 75 loss: 0.2612403929233551
  batch 75 loss_avg: 0.31679704785346985
  batch 75 loss_zero: 0.9208207726478577
  batch 75 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8055 0.0 2.2972 1.1392
true 0.7538 0.0 6.3438 1.459
  batch 76 batch_avg_loss: 0.27500888626826436
  batch 76 loss: 0.2851942181587219
  batch 76 loss_avg: 0.344637393951416
  batch 76 loss_zero: 0.9128126502037048
  batch 76 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7982 0.0 2.3517 1.1051
true 0.8237 0.0 4.3906 1.5356
  batch 77 batch_avg_loss: 0.2749284103319242
  batch 77 loss: 0.26881223917007446
  batch 77 loss_avg: 0.32045459747314453
  batch 77 loss_zero: 0.9989458322525024
  batch 77 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7966 0.0 2.4385 1.1033
true 0.7602 0.0 4.9375 1.5195
  batch 78 batch_avg_loss: 0.2750358065733543
  batch 78 loss: 0.2833053171634674
  batch 78 loss_avg: 0.35161712765693665
  batch 78 loss_zero: 0.9295045733451843
  batch 78 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7837 0.0 2.0388 1.0762
true 0.7456 0.0 4.125 1.502
  batch 79 batch_avg_loss: 0.2748149335384369
  batch 79 loss: 0.25758683681488037
  batch 79 loss_avg: 0.34234490990638733
  batch 79 loss_zero: 0.8983203172683716
  batch 79 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7685 0.0 2.2464 1.0403
true 0.7509 0.0 4.3516 1.4712
  batch 80 batch_avg_loss: 0.27461291253566744
  batch 80 loss: 0.2586532533168793
  batch 80 loss_avg: 0.3154243528842926
  batch 80 loss_zero: 0.8792185187339783
  batch 80 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7515 0.0 2.8103 0.9812
true 0.8234 0.0 7.7188 1.5498
  batch 81 batch_avg_loss: 0.2757274740272098
  batch 81 loss: 0.3648923933506012
  batch 81 loss_avg: 0.4441966712474823
  batch 81 loss_zero: 1.1222070455551147
  batch 81 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7511 0.0 2.4925 1.0011
true 0.7911 0.0 7.25 1.5347
  batch 82 batch_avg_loss: 0.2763039618730545
  batch 82 loss: 0.3229994773864746
  batch 82 loss_avg: 0.40929311513900757
  batch 82 loss_zero: 1.0350568294525146
  batch 82 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7614 0.0 1.841 1.0801
true 0.7654 0.0 6.2812 1.521
  batch 83 batch_avg_loss: 0.27642878602786236
  batch 83 loss: 0.28666436672210693
  batch 83 loss_avg: 0.3669792115688324
  batch 83 loss_zero: 0.9528645873069763
  batch 83 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7741 0.0 1.8441 1.114
true 0.7556 0.0 6.5391 1.4883
  batch 84 batch_avg_loss: 0.2768177773271288
  batch 84 loss: 0.3091040551662445
  batch 84 loss_avg: 0.38683784008026123
  batch 84 loss_zero: 0.9577348828315735
  batch 84 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7842 0.0 2.5446 1.1304
true 0.8173 0.0 6.1328 1.5186
  batch 85 batch_avg_loss: 0.27679873564664054
  batch 85 loss: 0.2751992344856262
  batch 85 loss_avg: 0.32903826236724854
  batch 85 loss_zero: 0.9969579577445984
  batch 85 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7984 0.0 2.5736 1.1448
true 0.7254 0.0 4.668 1.4492
  batch 86 batch_avg_loss: 0.27645816134158957
  batch 86 loss: 0.24750934541225433
  batch 86 loss_avg: 0.3111945688724518
  batch 86 loss_zero: 0.8374582529067993
  batch 86 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7842 0.0 2.7972 1.0854
true 0.8523 0.0 6.8359 1.5391
  batch 87 batch_avg_loss: 0.2766298095042678
  batch 87 loss: 0.2913915514945984
  batch 87 loss_avg: 0.3315064609050751
  batch 87 loss_zero: 1.0578757524490356
  batch 87 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7864 0.0 2.1172 1.1421
true 0.7897 0.0 4.6992 1.5293
  batch 88 batch_avg_loss: 0.27665179646150634
  batch 88 loss: 0.2785646617412567
  batch 88 loss_avg: 0.35913291573524475
  batch 88 loss_zero: 0.9827348589897156
  batch 88 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7906 0.0 2.0177 1.0885
true 0.736 0.0 9.1094 1.4653
  batch 89 batch_avg_loss: 0.2770645573232951
  batch 89 loss: 0.31338751316070557
  batch 89 loss_avg: 0.3958136737346649
  batch 89 loss_zero: 0.937455415725708
  batch 89 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7826 0.0 3.1269 1.0293
true 0.7872 0.0 8.6094 1.4971
  batch 90 batch_avg_loss: 0.27728437400526473
  batch 90 loss: 0.2968480587005615
  batch 90 loss_avg: 0.3680528700351715
  batch 90 loss_zero: 0.9877811074256897
  batch 90 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7725 0.0 2.3629 1.0415
true 0.7256 0.0 3.1953 1.4248
  batch 91 batch_avg_loss: 0.27694684447167994
  batch 91 loss: 0.2465691864490509
  batch 91 loss_avg: 0.2842397093772888
  batch 91 loss_zero: 0.8107664585113525
  batch 91 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7546 0.0 2.5522 1.0016
true 0.753 0.0 7.1484 1.4575
  batch 92 batch_avg_loss: 0.2767139082045659
  batch 92 loss: 0.2555167078971863
  batch 92 loss_avg: 0.34783637523651123
  batch 92 loss_zero: 0.9148894548416138
  batch 92 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7419 0.0 2.8018 0.9775
true 0.7494 0.0 6.7266 1.4678
  batch 93 batch_avg_loss: 0.2767775781372542
  batch 93 loss: 0.2826352119445801
  batch 93 loss_avg: 0.3407019376754761
  batch 93 loss_zero: 0.9022825956344604
  batch 93 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7333 0.0 2.8107 0.9323
true 0.8069 0.0 5.0508 1.5396
  batch 94 batch_avg_loss: 0.27705128189731154
  batch 94 loss: 0.3025057315826416
  batch 94 loss_avg: 0.3749113082885742
  batch 94 loss_zero: 1.0259294509887695
  batch 94 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7402 0.0 2.8375 0.9814
true 0.7803 0.0 5.5039 1.4951
  batch 95 batch_avg_loss: 0.27677496436395144
  batch 95 loss: 0.25080111622810364
  batch 95 loss_avg: 0.31501251459121704
  batch 95 loss_zero: 0.9238499999046326
  batch 95 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7564 0.0 2.4506 1.0304
true 0.7902 0.0 6.3672 1.5137
  batch 96 batch_avg_loss: 0.2768532377667725
  batch 96 loss: 0.2842892110347748
  batch 96 loss_avg: 0.3584575057029724
  batch 96 loss_zero: 0.9828934669494629
  batch 96 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7779 0.0 2.6324 1.0938
true 0.7458 0.0 5.5625 1.459
  batch 97 batch_avg_loss: 0.2768910799137096
  batch 97 loss: 0.2805239260196686
  batch 97 loss_avg: 0.3614486753940582
  batch 97 loss_zero: 0.9176921248435974
  batch 97 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7921 0.0 2.1254 1.1387
true 0.7197 0.0 6.6367 1.4121
  batch 98 batch_avg_loss: 0.2767712581826716
  batch 98 loss: 0.2651485502719879
  batch 98 loss_avg: 0.31694313883781433
  batch 98 loss_zero: 0.8349151015281677
  batch 98 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7804 0.0 2.8062 1.1279
true 0.8179 0.0 6.6562 1.5166
  batch 99 batch_avg_loss: 0.2769765135916797
  batch 99 loss: 0.297091543674469
  batch 99 loss_avg: 0.3382812738418579
  batch 99 loss_zero: 1.0073179006576538
  batch 99 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7775 0.0 2.4329 1.0938
true 0.7599 0.0 4.9453 1.4707
  batch 100 batch_avg_loss: 0.2768176852166653
  batch 100 loss: 0.2610936760902405
  batch 100 loss_avg: 0.30774953961372375
  batch 100 loss_zero: 0.8851987719535828
  batch 100 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7647 0.0 2.5425 1.055
true 0.7401 0.0 6.7461 1.4331
  batch 101 batch_avg_loss: 0.27664372959349415
  batch 101 loss: 0.25924816727638245
  batch 101 loss_avg: 0.30982476472854614
  batch 101 loss_zero: 0.8575096726417542
  batch 101 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7505 0.0 1.9978 1.0062
true 0.7848 0.0 5.6406 1.4897
  batch 102 batch_avg_loss: 0.2766356902087436
  batch 102 loss: 0.275823712348938
  batch 102 loss_avg: 0.339789479970932
  batch 102 loss_zero: 0.9557018876075745
  batch 102 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7451 0.0 1.9991 0.9552
true 0.8103 0.0 4.9688 1.5601
  batch 103 batch_avg_loss: 0.276759239799768
  batch 103 loss: 0.28936129808425903
  batch 103 loss_avg: 0.3599996566772461
  batch 103 loss_zero: 1.0166462659835815
  batch 103 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7532 0.0 1.7688 0.9703
true 0.761 0.0 4.5547 1.5112
  batch 104 batch_avg_loss: 0.27659716156239694
  batch 104 loss: 0.25990310311317444
  batch 104 loss_avg: 0.33132004737854004
  batch 104 loss_zero: 0.9104269742965698
  batch 104 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7653 0.0 1.6979 0.9628
true 0.7728 0.0 4.2422 1.4829
  batch 105 batch_avg_loss: 0.276469891837665
  batch 105 loss: 0.26323384046554565
  batch 105 loss_avg: 0.3143850266933441
  batch 105 loss_zero: 0.9116073846817017
  batch 105 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7765 0.0 1.6495 1.0129
true 0.7785 0.0 5.7578 1.4707
  batch 106 batch_avg_loss: 0.2765341138221183
  batch 106 loss: 0.2832774221897125
  batch 106 loss_avg: 0.3244048058986664
  batch 106 loss_zero: 0.9303895831108093
  batch 106 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7848 0.0 1.7604 1.0267
true 0.8182 0.0 5.8125 1.5332
  batch 107 batch_avg_loss: 0.2764719614637232
  batch 107 loss: 0.26988381147384644
  batch 107 loss_avg: 0.33545467257499695
  batch 107 loss_zero: 1.0048279762268066
  batch 107 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8033 0.0 1.5476 1.0558
true 0.8154 0.0 5.0664 1.5566
  batch 108 batch_avg_loss: 0.2764206447259144
  batch 108 loss: 0.270929753780365
  batch 108 loss_avg: 0.3470962345600128
  batch 108 loss_zero: 1.0120424032211304
  batch 108 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8209 0.0 1.835 1.0945
true 0.7675 0.0 4.3281 1.5059
  batch 109 batch_avg_loss: 0.2763773535096317
  batch 109 loss: 0.2717019021511078
  batch 109 loss_avg: 0.3485913872718811
  batch 109 loss_zero: 0.9376514554023743
  batch 109 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8276 0.0 2.4103 1.1105
true 0.7949 0.0 7.7188 1.5059
  batch 110 batch_avg_loss: 0.27684048373590814
  batch 110 loss: 0.3273216784000397
  batch 110 loss_avg: 0.3976493775844574
  batch 110 loss_zero: 1.029512643814087
  batch 110 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8225 0.0 1.9007 1.1634
true 0.7059 0.0 4.8867 1.4453
  batch 111 batch_avg_loss: 0.2767892900082442
  batch 111 loss: 0.27115797996520996
  batch 111 loss_avg: 0.3473402261734009
  batch 111 loss_zero: 0.8456407785415649
  batch 111 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7957 0.0 1.9721 1.0953
true 0.7859 0.0 4.2266 1.4917
  batch 112 batch_avg_loss: 0.2766474364325404
  batch 112 loss: 0.26090168952941895
  batch 112 loss_avg: 0.31477922201156616
  batch 112 loss_zero: 0.932487964630127
  batch 112 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7623 0.0 2.5384 1.0777
true 0.8035 0.0 5.8672 1.5098
  batch 113 batch_avg_loss: 0.27669171065883297
  batch 113 loss: 0.2816504240036011
  batch 113 loss_avg: 0.35188186168670654
  batch 113 loss_zero: 0.9974867105484009
  batch 113 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7421 0.0 2.3639 1.0474
true 0.7782 0.0 4.5078 1.5215
  batch 114 batch_avg_loss: 0.27651430261239673
  batch 114 loss: 0.25646719336509705
  batch 114 loss_avg: 0.33114513754844666
  batch 114 loss_zero: 0.9367801547050476
  batch 114 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7324 0.0 1.9667 1.0547
true 0.7176 0.0 4.5703 1.439
  batch 115 batch_avg_loss: 0.2762745590313621
  batch 115 loss: 0.24894379079341888
  batch 115 loss_avg: 0.311585009098053
  batch 115 loss_zero: 0.8265875577926636
  batch 115 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7227 0.0 2.9611 1.0354
true 0.8037 0.0 5.1484 1.5195
  batch 116 batch_avg_loss: 0.27613845441875784
  batch 116 loss: 0.2604864239692688
  batch 116 loss_avg: 0.3242889642715454
  batch 116 loss_zero: 0.9702454209327698
  batch 116 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7288 0.0 2.8873 1.0605
true 0.7814 0.0 5.2812 1.5386
  batch 117 batch_avg_loss: 0.276230212714937
  batch 117 loss: 0.2868741750717163
  batch 117 loss_avg: 0.3661651015281677
  batch 117 loss_zero: 0.9767622947692871
  batch 117 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7461 0.0 2.862 1.0495
true 0.7361 0.0 5.3047 1.4609
  batch 118 batch_avg_loss: 0.2760803083241996
  batch 118 loss: 0.2585414946079254
  batch 118 loss_avg: 0.33504626154899597
  batch 118 loss_zero: 0.8769139647483826
  batch 118 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7598 0.0 2.4461 1.0742
true 0.8225 0.0 4.7344 1.5566
  batch 119 batch_avg_loss: 0.2761258502968219
  batch 119 loss: 0.28149980306625366
  batch 119 loss_avg: 0.34372085332870483
  batch 119 loss_zero: 1.0201473236083984
  batch 119 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.785 0.0 2.5545 1.0662
true 0.8031 0.0 6.418 1.5146
  batch 120 batch_avg_loss: 0.2760470502078533
  batch 120 loss: 0.2666698396205902
  batch 120 loss_avg: 0.3296511173248291
  batch 120 loss_zero: 0.9745669364929199
  batch 120 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8112 0.0 2.9233 1.1205
true 0.7781 0.0 5.0781 1.5156
  batch 121 batch_avg_loss: 0.27601047241983334
  batch 121 loss: 0.27162113785743713
  batch 121 loss_avg: 0.35741037130355835
  batch 121 loss_zero: 0.9627863168716431
  batch 121 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8275 0.0 3.0705 1.1313
true 0.8645 0.0 5.2891 1.5908
  batch 122 batch_avg_loss: 0.27602540835982464
  batch 122 loss: 0.27783265709877014
  batch 122 loss_avg: 0.3427085876464844
  batch 122 loss_zero: 1.0900201797485352
  batch 122 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8495 0.0 3.034 1.179
true 0.8157 0.0 5.5039 1.5391
  batch 123 batch_avg_loss: 0.2761242990571309
  batch 123 loss: 0.28818896412849426
  batch 123 loss_avg: 0.3694775700569153
  batch 123 loss_zero: 1.0347979068756104
  batch 123 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.859 0.0 2.5877 1.2144
true 0.7689 0.0 5.5234 1.4858
  batch 124 batch_avg_loss: 0.27608661305519844
  batch 124 loss: 0.2714512348175049
  batch 124 loss_avg: 0.34296441078186035
  batch 124 loss_zero: 0.9341790676116943
  batch 124 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8413 0.0 2.7926 1.1646
true 0.8418 0.0 6.6562 1.5479
  batch 125 batch_avg_loss: 0.27641047024726867
  batch 125 loss: 0.3165687620639801
  batch 125 loss_avg: 0.40825459361076355
  batch 125 loss_zero: 1.1168426275253296
  batch 125 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.826 0.0 2.9369 1.183
true 0.7889 0.0 4.5508 1.5059
  batch 126 batch_avg_loss: 0.27616964197821087
  batch 126 loss: 0.2460661083459854
  batch 126 loss_avg: 0.3118063509464264
  batch 126 loss_zero: 0.9340911507606506
  batch 126 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8024 0.0 2.32 1.1458
true 0.7667 0.0 6.0273 1.4863
  batch 127 batch_avg_loss: 0.27612224162563564
  batch 127 loss: 0.2701497972011566
  batch 127 loss_avg: 0.3291469216346741
  batch 127 loss_zero: 0.9169539213180542
  batch 127 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7718 0.0 2.4955 1.0629
true 0.7669 0.0 3.8398 1.4375
  batch 128 batch_avg_loss: 0.2758385332999751
  batch 128 loss: 0.23980757594108582
  batch 128 loss_avg: 0.26608946919441223
  batch 128 loss_zero: 0.8541723489761353
  batch 128 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7414 0.0 1.8006 0.9993
true 0.7339 0.0 4.5664 1.4199
  batch 129 batch_avg_loss: 0.2755800295014714
  batch 129 loss: 0.24249154329299927
  batch 129 loss_avg: 0.2909950613975525
  batch 129 loss_zero: 0.8295722007751465
  batch 129 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7123 0.0 1.8803 0.9397
true 0.7469 0.0 5.2109 1.4409
  batch 130 batch_avg_loss: 0.27542728128341526
  batch 130 loss: 0.2557227611541748
  batch 130 loss_avg: 0.3259759545326233
  batch 130 loss_zero: 0.8837916851043701
  batch 130 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6995 0.0 1.9373 0.9116
true 0.7309 0.0 4.2305 1.4316
  batch 131 batch_avg_loss: 0.2752235127996852
  batch 131 loss: 0.24873360991477966
  batch 131 loss_avg: 0.29085248708724976
  batch 131 loss_zero: 0.8251275420188904
  batch 131 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6978 0.0 1.6874 0.9096
true 0.8062 0.0 6.6133 1.5303
  batch 132 batch_avg_loss: 0.27547777139327745
  batch 132 loss: 0.30878564715385437
  batch 132 loss_avg: 0.367438405752182
  batch 132 loss_zero: 1.0173648595809937
  batch 132 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7289 0.0 1.5643 0.94
true 0.7775 0.0 4.2383 1.5078
  batch 133 batch_avg_loss: 0.27528149472143415
  batch 133 loss: 0.24937297403812408
  batch 133 loss_avg: 0.3159606158733368
  batch 133 loss_zero: 0.9204137921333313
  batch 133 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7667 0.0 1.8771 1.0015
true 0.7774 0.0 4.3633 1.5137
  batch 134 batch_avg_loss: 0.2752146636372182
  batch 134 loss: 0.2663261294364929
  batch 134 loss_avg: 0.3326285481452942
  batch 134 loss_zero: 0.936904788017273
  batch 134 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8 0.0 1.6775 1.079
true 0.8323 0.0 4.1797 1.5454
  batch 135 batch_avg_loss: 0.2751458399825626
  batch 135 loss: 0.26592347025871277
  batch 135 loss_avg: 0.3095729649066925
  batch 135 loss_zero: 1.0022786855697632
  batch 135 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8398 0.0 2.2652 1.1218
true 0.7916 0.0 5.6484 1.5195
  batch 136 batch_avg_loss: 0.27534203231334686
  batch 136 loss: 0.301827996969223
  batch 136 loss_avg: 0.3785064220428467
  batch 136 loss_zero: 1.005201816558838
  batch 136 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8495 0.0 2.6826 1.1363
true 0.7896 0.0 7.3359 1.5317
  batch 137 batch_avg_loss: 0.2754174749346545
  batch 137 loss: 0.2856776714324951
  batch 137 loss_avg: 0.37602269649505615
  batch 137 loss_zero: 0.9995531439781189
  batch 137 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8359 0.0 2.0343 1.1712
true 0.742 0.0 5.1172 1.4678
  batch 138 batch_avg_loss: 0.2753503499687582
  batch 138 loss: 0.2661542296409607
  batch 138 loss_avg: 0.3161793649196625
  batch 138 loss_zero: 0.8666996955871582
  batch 138 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7757 0.0 1.9671 1.0753
true 0.6858 0.0 5.8672 1.4033
  batch 139 batch_avg_loss: 0.2753505237239728
  batch 139 loss: 0.27537450194358826
  batch 139 loss_avg: 0.30420824885368347
  batch 139 loss_zero: 0.7745543718338013
  batch 139 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6769 0.0 1.678 0.9616
true 0.8332 0.0 5.375 1.5449
  batch 140 batch_avg_loss: 0.2754619374871254
  batch 140 loss: 0.29094845056533813
  batch 140 loss_avg: 0.332552045583725
  batch 140 loss_zero: 1.0267943143844604
  batch 140 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6665 0.0 2.2772 0.9328
true 0.7357 0.0 6.7461 1.4487
  batch 141 batch_avg_loss: 0.2756374256407961
  batch 141 loss: 0.3002057671546936
  batch 141 loss_avg: 0.3736855983734131
  batch 141 loss_zero: 0.9148879647254944
  batch 141 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.694 0.0 1.968 0.9545
true 0.7606 0.0 4.5625 1.4868
  batch 142 batch_avg_loss: 0.27547646828100714
  batch 142 loss: 0.252781480550766
  batch 142 loss_avg: 0.3246171176433563
  batch 142 loss_zero: 0.903099536895752
  batch 142 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7413 0.0 2.4156 1.0139
true 0.7767 0.0 6.0391 1.5034
  batch 143 batch_avg_loss: 0.2754363242562834
  batch 143 loss: 0.2697358727455139
  batch 143 loss_avg: 0.3463099002838135
  batch 143 loss_zero: 0.9495037198066711
  batch 143 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.786 0.0 3.0196 1.0664
true 0.7726 0.0 4.5703 1.5215
  batch 144 batch_avg_loss: 0.27531100002427894
  batch 144 loss: 0.257389634847641
  batch 144 loss_avg: 0.3441031277179718
  batch 144 loss_zero: 0.9409676194190979
  batch 144 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8216 0.0 3.527 1.0992
true 0.8508 0.0 4.8359 1.5625
  batch 145 batch_avg_loss: 0.2751796202412967
  batch 145 loss: 0.2562609314918518
  batch 145 loss_avg: 0.33140164613723755
  batch 145 loss_zero: 1.055341362953186
  batch 145 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8574 0.0 2.9676 1.1512
true 0.7618 0.0 5.4141 1.502
  batch 146 batch_avg_loss: 0.2750820868635831
  batch 146 loss: 0.26093974709510803
  batch 146 loss_avg: 0.3416506052017212
  batch 146 loss_zero: 0.9220618605613708
  batch 146 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8586 0.0 3.1344 1.2038
true 0.7959 0.0 6.1914 1.5063
  batch 147 batch_avg_loss: 0.27517731578982607
  batch 147 loss: 0.28908073902130127
  batch 147 loss_avg: 0.36883842945098877
  batch 147 loss_zero: 1.0023508071899414
  batch 147 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8209 0.0 2.7494 1.1771
true 0.7471 0.0 4.3672 1.4526
  batch 148 batch_avg_loss: 0.2750514334923512
  batch 148 loss: 0.2565467357635498
  batch 148 loss_avg: 0.302956223487854
  batch 148 loss_zero: 0.8611767888069153
  batch 148 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7573 0.0 2.1947 1.0749
true 0.7536 0.0 5.6875 1.4673
  batch 149 batch_avg_loss: 0.27490012397702107
  batch 149 loss: 0.2525063157081604
  batch 149 loss_avg: 0.3155657947063446
  batch 149 loss_zero: 0.8834812641143799
  batch 149 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6994 0.0 2.0114 0.9872
true 0.725 0.0 5.5703 1.4453
  batch 150 batch_avg_loss: 0.2747472721338272
  batch 150 loss: 0.25197234749794006
  batch 150 loss_avg: 0.32717013359069824
  batch 150 loss_zero: 0.8527339100837708
  batch 150 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.665 0.0 3.0566 0.917
true 0.8264 0.0 5.6562 1.5508
  batch 151 batch_avg_loss: 0.2750012665394916
  batch 151 loss: 0.3131004273891449
  batch 151 loss_avg: 0.3626793622970581
  batch 151 loss_zero: 1.045678973197937
  batch 151 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7143 0.0 2.3812 0.9688
true 0.7526 0.0 5.4766 1.4893
  batch 152 batch_avg_loss: 0.27490558475255966
  batch 152 loss: 0.2604576349258423
  batch 152 loss_avg: 0.34405258297920227
  batch 152 loss_zero: 0.9104632139205933
  batch 152 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7731 0.0 2.1179 1.0584
true 0.7442 0.0 5.1836 1.4883
  batch 153 batch_avg_loss: 0.2749897586364372
  batch 153 loss: 0.2877841889858246
  batch 153 loss_avg: 0.35095712542533875
  batch 153 loss_zero: 0.904844343662262
  batch 153 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8069 0.0 2.4075 1.1066
true 0.8158 0.0 4.9297 1.5254
  batch 154 batch_avg_loss: 0.27500378621088994
  batch 154 loss: 0.2771500051021576
  batch 154 loss_avg: 0.335588276386261
  batch 154 loss_zero: 1.0011416673660278
  batch 154 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8339 0.0 2.4953 1.1176
true 0.8007 0.0 5.8008 1.5596
  batch 155 batch_avg_loss: 0.27518872618675233
  batch 155 loss: 0.3036694824695587
  batch 155 loss_avg: 0.3904341459274292
  batch 155 loss_zero: 1.0316202640533447
  batch 155 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8435 0.0 2.3751 1.1366
true 0.7181 0.0 4.1172 1.4297
  batch 156 batch_avg_loss: 0.2749980759735291
  batch 156 loss: 0.2454472929239273
  batch 156 loss_avg: 0.29861313104629517
  batch 156 loss_zero: 0.8143343329429626
  batch 156 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7926 0.0 2.5712 1.0426
true 0.7769 0.0 7.9219 1.5312
  batch 157 batch_avg_loss: 0.2755191496033577
  batch 157 loss: 0.3568066358566284
  batch 157 loss_avg: 0.5064200162887573
  batch 157 loss_zero: 1.1099998950958252
  batch 157 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.747 0.0 2.1363 1.09
true 0.715 0.0 4.9062 1.4062
  batch 158 batch_avg_loss: 0.2753522830862033
  batch 158 loss: 0.2491542398929596
  batch 158 loss_avg: 0.2990717887878418
  batch 158 loss_zero: 0.8102856278419495
  batch 158 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6941 0.0 2.4918 0.9952
true 0.7793 0.0 7.0781 1.5103
  batch 159 batch_avg_loss: 0.2756378428553635
  batch 159 loss: 0.32075628638267517
  batch 159 loss_avg: 0.38458114862442017
  batch 159 loss_zero: 0.9918850064277649
  batch 159 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6797 0.0 3.1782 0.9617
true 0.7831 0.0 5.8516 1.5
  batch 160 batch_avg_loss: 0.27552891736850144
  batch 160 loss: 0.258209764957428
  batch 160 loss_avg: 0.33249688148498535
  batch 160 loss_zero: 0.9457221627235413
  batch 160 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7119 0.0 2.6172 1.0414
true 0.8115 0.0 5.4922 1.5581
  batch 161 batch_avg_loss: 0.27554588427084575
  batch 161 loss: 0.27826058864593506
  batch 161 loss_avg: 0.36129358410835266
  batch 161 loss_zero: 1.0197890996932983
  batch 161 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7703 0.0 2.5298 1.0965
true 0.787 0.0 5.1562 1.5
  batch 162 batch_avg_loss: 0.27552114841010833
  batch 162 loss: 0.2715386748313904
  batch 162 loss_avg: 0.33603325486183167
  batch 162 loss_zero: 0.9554495215415955
  batch 162 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.814 0.0 2.4685 1.1798
true 0.7419 0.0 3.9395 1.4722
  batch 163 batch_avg_loss: 0.2754303186766209
  batch 163 loss: 0.26071590185165405
  batch 163 loss_avg: 0.29863879084587097
  batch 163 loss_zero: 0.8490603566169739
  batch 163 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8258 0.0 2.6573 1.1422
true 0.7493 0.0 5.7617 1.4648
  batch 164 batch_avg_loss: 0.27545170622264464
  batch 164 loss: 0.2789378762245178
  batch 164 loss_avg: 0.31819406151771545
  batch 164 loss_zero: 0.8796080946922302
  batch 164 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.8137 0.0 2.1611 1.1279
true 0.7832 0.0 5.1641 1.5205
  batch 165 batch_avg_loss: 0.27548026072256493
  batch 165 loss: 0.2801631987094879
  batch 165 loss_avg: 0.3839738965034485
  batch 165 loss_zero: 0.997444212436676
  batch 165 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7925 0.0 2.2332 1.0433
true 0.7725 0.0 5.4375 1.4927
  batch 166 batch_avg_loss: 0.2754567162279623
  batch 166 loss: 0.2715718746185303
  batch 166 loss_avg: 0.3417157232761383
  batch 166 loss_zero: 0.9384852647781372
  batch 166 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7674 0.0 2.5482 0.994
true 0.844 0.0 7.7656 1.5723
  batch 167 batch_avg_loss: 0.275738216713517
  batch 167 loss: 0.32246729731559753
  batch 167 loss_avg: 0.3874603509902954
  batch 167 loss_zero: 1.0998437404632568
  batch 167 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7614 0.0 2.4254 1.0262
true 0.7844 0.0 5.6719 1.5469
  batch 168 batch_avg_loss: 0.27583446930206956
  batch 168 loss: 0.2919086515903473
  batch 168 loss_avg: 0.37783315777778625
  batch 168 loss_zero: 0.9930711388587952
  batch 168 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7668 0.0 2.0302 1.0383
true 0.811 0.0 6.7461 1.5674
  batch 169 batch_avg_loss: 0.27621445985588094
  batch 169 loss: 0.34005287289619446
  batch 169 loss_avg: 0.43533799052238464
  batch 169 loss_zero: 1.0930217504501343
  batch 169 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7899 0.0 2.3991 1.0781
true 0.8039 0.0 6.0 1.519
  batch 170 batch_avg_loss: 0.27614100549150916
  batch 170 loss: 0.26372721791267395
  batch 170 loss_avg: 0.33006030321121216
  batch 170 loss_zero: 0.9763728380203247
  batch 170 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8072 0.0 1.7825 1.1486
true 0.7389 0.0 5.1484 1.4551
  batch 171 batch_avg_loss: 0.2759584693009393
  batch 171 loss: 0.244927316904068
  batch 171 loss_avg: 0.29599079489707947
  batch 171 loss_zero: 0.8419466614723206
  batch 171 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7951 0.0 2.0204 1.1249
true 0.757 0.0 5.4141 1.4551
  batch 172 batch_avg_loss: 0.27598662388532663
  batch 172 loss: 0.28080105781555176
  batch 172 loss_avg: 0.3260577321052551
  batch 172 loss_zero: 0.8990477323532104
  batch 172 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7634 0.0 2.183 1.0333
true 0.804 0.0 5.4492 1.5283
  batch 173 batch_avg_loss: 0.2760798322155296
  batch 173 loss: 0.29211166501045227
  batch 173 loss_avg: 0.3631424605846405
  batch 173 loss_zero: 1.0095092058181763
  batch 173 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7523 0.0 2.3121 1.0196
true 0.7723 0.0 5.1875 1.4941
  batch 174 batch_avg_loss: 0.2760318621307954
  batch 174 loss: 0.26773303747177124
  batch 174 loss_avg: 0.3511592447757721
  batch 174 loss_zero: 0.9475852847099304
  batch 174 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7503 0.0 2.1059 1.0016
true 0.7662 0.0 7.1797 1.5156
  batch 175 batch_avg_loss: 0.2762594898257937
  batch 175 loss: 0.31586670875549316
  batch 175 loss_avg: 0.41127192974090576
  batch 175 loss_zero: 0.9984049201011658
  batch 175 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7608 0.0 2.3027 1.0408
true 0.7978 0.0 4.9844 1.5576
  batch 176 batch_avg_loss: 0.2764626049690626
  batch 176 loss: 0.31200775504112244
  batch 176 loss_avg: 0.4177606403827667
  batch 176 loss_zero: 1.0542272329330444
  batch 176 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7869 0.0 3.0396 1.1081
true 0.7434 0.0 3.9766 1.4678
  batch 177 batch_avg_loss: 0.2762285307639063
  batch 177 loss: 0.23503147065639496
  batch 177 loss_avg: 0.3213328719139099
  batch 177 loss_zero: 0.8740506172180176
  batch 177 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7957 0.0 2.9117 1.1357
true 0.7341 0.0 4.1172 1.4473
  batch 178 batch_avg_loss: 0.27613781827889133
  batch 178 loss: 0.2600817084312439
  batch 178 loss_avg: 0.31021225452423096
  batch 178 loss_zero: 0.8491761684417725
  batch 178 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7729 0.0 3.3526 1.111
true 0.8248 0.0 7.7969 1.5425
  batch 179 batch_avg_loss: 0.2762362607364548
  batch 179 loss: 0.2937590181827545
  batch 179 loss_avg: 0.387506902217865
  batch 179 loss_zero: 1.0678796768188477
  batch 179 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7738 0.0 2.7161 1.1511
true 0.7646 0.0 4.5938 1.5098
  batch 180 batch_avg_loss: 0.2760851687855191
  batch 180 loss: 0.24903970956802368
  batch 180 loss_avg: 0.34474706649780273
  batch 180 loss_zero: 0.9293541312217712
  batch 180 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7716 0.0 2.5193 1.1474
true 0.7939 0.0 9.625 1.5161
  batch 181 batch_avg_loss: 0.27633685877968595
  batch 181 loss: 0.32164105772972107
  batch 181 loss_avg: 0.4010196924209595
  batch 181 loss_zero: 1.031273603439331
  batch 181 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7772 0.0 2.412 1.1686
true 0.7106 0.0 6.5781 1.4761
  batch 182 batch_avg_loss: 0.2763344743749598
  batch 182 loss: 0.2759028971195221
  batch 182 loss_avg: 0.36443254351615906
  batch 182 loss_zero: 0.8694154620170593
  batch 182 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7575 0.0 2.4405 1.0943
true 0.7564 0.0 8.1875 1.4453
  batch 183 batch_avg_loss: 0.27629241249600395
  batch 183 loss: 0.26863715052604675
  batch 183 loss_avg: 0.3513800799846649
  batch 183 loss_zero: 0.9234699010848999
  batch 183 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7406 0.0 2.215 1.0495
true 0.7756 0.0 6.0938 1.4971
  batch 184 batch_avg_loss: 0.27637994661927223
  batch 184 loss: 0.29239869117736816
  batch 184 loss_avg: 0.35853174328804016
  batch 184 loss_zero: 0.9600365161895752
  batch 184 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7404 0.0 2.4969 1.0059
true 0.7889 0.0 5.4922 1.519
  batch 185 batch_avg_loss: 0.2764984871890094
  batch 185 loss: 0.29830995202064514
  batch 185 loss_avg: 0.3950175940990448
  batch 185 loss_zero: 1.0173448324203491
  batch 185 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.761 0.0 2.4815 1.0564
true 0.7723 0.0 5.1172 1.4692
  batch 186 batch_avg_loss: 0.2763294220291158
  batch 186 loss: 0.24505236744880676
  batch 186 loss_avg: 0.306688517332077
  batch 186 loss_zero: 0.9031621217727661
  batch 186 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7847 0.0 3.1439 1.039
true 0.8307 0.0 6.7656 1.5581
  batch 187 batch_avg_loss: 0.27641197799998807
  batch 187 loss: 0.2917673885822296
  batch 187 loss_avg: 0.37563368678092957
  batch 187 loss_zero: 1.0656412839889526
  batch 187 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8206 0.0 2.6466 1.1201
true 0.8498 0.0 5.0508 1.5557
  batch 188 batch_avg_loss: 0.2764900398064167
  batch 188 loss: 0.2910875976085663
  batch 188 loss_avg: 0.36075443029403687
  batch 188 loss_zero: 1.0828583240509033
  batch 188 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.8614 0.0 3.0232 1.1611
true 0.7218 0.0 4.4219 1.4321
  batch 189 batch_avg_loss: 0.27635937172269065
  batch 189 loss: 0.251793771982193
  batch 189 loss_avg: 0.3062804043292999
  batch 189 loss_zero: 0.8272192478179932
  batch 189 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.845 0.0 2.4308 1.1902
true 0.8445 0.0 7.25 1.5581
  batch 190 batch_avg_loss: 0.276714541880708
  batch 190 loss: 0.34384170174598694
  batch 190 loss_avg: 0.40652701258659363
  batch 190 loss_zero: 1.1196413040161133
  batch 190 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8283 0.0 2.7944 1.1294
true 0.8203 0.0 7.0781 1.5029
  batch 191 batch_avg_loss: 0.2767640408421062
  batch 191 loss: 0.2861688435077667
  batch 191 loss_avg: 0.35748469829559326
  batch 191 loss_zero: 1.030373215675354
  batch 191 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.812 0.0 2.1676 1.113
true 0.7976 0.0 4.8672 1.5142
  batch 192 batch_avg_loss: 0.27669882494956255
  batch 192 loss: 0.26424258947372437
  batch 192 loss_avg: 0.3341251015663147
  batch 192 loss_zero: 0.9703272581100464
  batch 192 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7921 0.0 2.5281 1.0727
true 0.7239 0.0 3.9062 1.4038
  batch 193 batch_avg_loss: 0.2764183715217472
  batch 193 loss: 0.22257131338119507
  batch 193 loss_avg: 0.2696647047996521
  batch 193 loss_zero: 0.7937631011009216
  batch 193 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7606 0.0 2.0146 1.0255
true 0.7396 0.0 4.0078 1.4785
  batch 194 batch_avg_loss: 0.2762401109350096
  batch 194 loss: 0.241835817694664
  batch 194 loss_avg: 0.32879379391670227
  batch 194 loss_zero: 0.8757728934288025
  batch 194 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7297 0.0 2.1727 0.9929
true 0.6896 0.0 4.7188 1.4194
  batch 195 batch_avg_loss: 0.2760759608103679
  batch 195 loss: 0.24423083662986755
  batch 195 loss_avg: 0.33554041385650635
  batch 195 loss_zero: 0.8111549019813538
  batch 195 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6967 0.0 2.7554 0.951
true 0.7596 0.0 4.8125 1.4624
  batch 196 batch_avg_loss: 0.27601816467180545
  batch 196 loss: 0.2647479176521301
  batch 196 loss_avg: 0.33347493410110474
  batch 196 loss_zero: 0.9104538559913635
  batch 196 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6815 0.0 2.1958 0.9785
true 0.7582 0.0 4.668 1.501
  batch 197 batch_avg_loss: 0.2760824705592267
  batch 197 loss: 0.2886864244937897
  batch 197 loss_avg: 0.3486296236515045
  batch 197 loss_zero: 0.9234314560890198
  batch 197 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6894 0.0 3.0456 0.9618
true 0.7676 0.0 4.5781 1.4805
  batch 198 batch_avg_loss: 0.27610292842592854
  batch 198 loss: 0.28013312816619873
  batch 198 loss_avg: 0.3229016661643982
  batch 198 loss_zero: 0.9120659828186035
  batch 198 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7102 0.0 2.1029 1.0136
true 0.8246 0.0 6.5391 1.5356
  batch 199 batch_avg_loss: 0.27618217835174735
  batch 199 loss: 0.29187366366386414
  batch 199 loss_avg: 0.33879756927490234
  batch 199 loss_zero: 1.018810510635376
  batch 199 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7605 0.0 2.2898 1.0392
true 0.8336 0.0 4.8867 1.5259
  batch 200 batch_avg_loss: 0.27613354854285715
  batch 200 loss: 0.2664562165737152
  batch 200 loss_avg: 0.3030426502227783
  batch 200 loss_zero: 0.9979491233825684
  batch 200 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8176 0.0 2.4322 1.0594
true 0.7642 0.0 5.125 1.4956
  batch 201 batch_avg_loss: 0.2762494933101075
  batch 201 loss: 0.2994384467601776
  batch 201 loss_avg: 0.3303336799144745
  batch 201 loss_zero: 0.9142708778381348
  batch 201 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8458 0.0 2.4196 1.0699
true 0.7664 0.0 7.1797 1.4707
  batch 202 batch_avg_loss: 0.2764505752094901
  batch 202 loss: 0.31686803698539734
  batch 202 loss_avg: 0.3751688003540039
  batch 202 loss_zero: 0.9624653458595276
  batch 202 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8381 0.0 2.0306 1.0323
true 0.85 0.0 5.0547 1.5835
  batch 203 batch_avg_loss: 0.2764934964221099
  batch 203 loss: 0.2851635813713074
  batch 203 loss_avg: 0.3526604175567627
  batch 203 loss_zero: 1.0750864744186401
  batch 203 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8338 0.0 1.8902 1.0308
true 0.8315 0.0 6.6016 1.5566
  batch 204 batch_avg_loss: 0.27677205329140026
  batch 204 loss: 0.3333190977573395
  batch 204 loss_avg: 0.38693004846572876
  batch 204 loss_zero: 1.0784046649932861
  batch 204 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8285 0.0 2.0609 1.0358
true 0.7171 0.0 5.2891 1.4355
  batch 205 batch_avg_loss: 0.27667904547074945
  batch 205 loss: 0.2577054500579834
  batch 205 loss_avg: 0.29740825295448303
  batch 205 loss_zero: 0.811626672744751
  batch 205 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7783 0.0 1.9453 0.9843
true 0.7392 0.0 4.4102 1.4238
  batch 206 batch_avg_loss: 0.2765885246465507
  batch 206 loss: 0.2580317556858063
  batch 206 loss_avg: 0.30386367440223694
  batch 206 loss_zero: 0.850266695022583
  batch 206 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7146 0.0 2.3458 0.9421
true 0.8031 0.0 6.0312 1.5391
  batch 207 batch_avg_loss: 0.276851830923039
  batch 207 loss: 0.3310929238796234
  batch 207 loss_avg: 0.4222092032432556
  batch 207 loss_zero: 1.0671429634094238
  batch 207 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7102 0.0 1.7529 1.0008
true 0.7785 0.0 5.2812 1.5054
  batch 208 batch_avg_loss: 0.2768190990990171
  batch 208 loss: 0.27004361152648926
  batch 208 loss_avg: 0.33443430066108704
  batch 208 loss_zero: 0.9404698014259338
  batch 208 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.741 0.0 3.0752 1.0964
true 0.7365 0.0 6.9922 1.4512
  batch 209 batch_avg_loss: 0.2767528822404916
  batch 209 loss: 0.26297977566719055
  batch 209 loss_avg: 0.3307928442955017
  batch 209 loss_zero: 0.8732372522354126
  batch 209 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7683 0.0 3.2451 1.0995
true 0.747 0.0 7.2031 1.4668
  batch 210 batch_avg_loss: 0.2767817117628597
  batch 210 loss: 0.2828070819377899
  batch 210 loss_avg: 0.35751262307167053
  batch 210 loss_zero: 0.9155954718589783
  batch 210 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.777 0.0 3.2154 1.1437
true 0.7865 0.0 6.3711 1.5078
  batch 211 batch_avg_loss: 0.27687068580168683
  batch 211 loss: 0.2955552339553833
  batch 211 loss_avg: 0.37558189034461975
  batch 211 loss_zero: 0.9942046403884888
  batch 211 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7828 0.0 3.1683 1.1668
true 0.8076 0.0 7.1797 1.5186
  batch 212 batch_avg_loss: 0.2769812008822864
  batch 212 loss: 0.30029988288879395
  batch 212 loss_avg: 0.3772072494029999
  batch 212 loss_zero: 1.0293792486190796
  batch 212 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7951 0.0 2.9142 1.1434
true 0.7264 0.0 5.8672 1.4639
  batch 213 batch_avg_loss: 0.2769738054471397
  batch 213 loss: 0.27540597319602966
  batch 213 loss_avg: 0.3507858216762543
  batch 213 loss_zero: 0.878476619720459
  batch 213 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7771 0.0 2.0427 1.0781
true 0.8055 0.0 5.3281 1.4922
  batch 214 batch_avg_loss: 0.27683686005456426
  batch 214 loss: 0.24766749143600464
  batch 214 loss_avg: 0.30893826484680176
  batch 214 loss_zero: 0.9577224850654602
  batch 214 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7733 0.0 3.1665 1.0109
true 0.7465 0.0 7.8281 1.4922
  batch 215 batch_avg_loss: 0.27689098708851395
  batch 215 loss: 0.2884741723537445
  batch 215 loss_avg: 0.3804800510406494
  batch 215 loss_zero: 0.9376892447471619
  batch 215 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7647 0.0 1.9584 1.0374
true 0.775 0.0 5.8242 1.5581
  batch 216 batch_avg_loss: 0.27689606399723776
  batch 216 loss: 0.27798759937286377
  batch 216 loss_avg: 0.36529630422592163
  batch 216 loss_zero: 0.965900182723999
  batch 216 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7659 0.0 1.9993 1.0444
true 0.8023 0.0 6.1016 1.4551
  batch 217 batch_avg_loss: 0.27688884453564744
  batch 217 loss: 0.27532944083213806
  batch 217 loss_avg: 0.323676198720932
  batch 217 loss_zero: 0.9674091935157776
  batch 217 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7832 0.0 2.4608 1.0618
true 0.8302 0.0 5.1484 1.5625
  batch 218 batch_avg_loss: 0.2768805975077349
  batch 218 loss: 0.2750909924507141
  batch 218 loss_avg: 0.3285777270793915
  batch 218 loss_zero: 1.017829179763794
  batch 218 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8226 0.0 2.6653 1.1167
true 0.8376 0.0 7.5859 1.5747
  batch 219 batch_avg_loss: 0.2769807683958855
  batch 219 loss: 0.29881802201271057
  batch 219 loss_avg: 0.41030722856521606
  batch 219 loss_zero: 1.1118782758712769
  batch 219 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.869 0.0 2.2667 1.204
true 0.7987 0.0 7.7656 1.5435
  batch 220 batch_avg_loss: 0.2773964797231284
  batch 220 loss: 0.368437260389328
  batch 220 loss_avg: 0.4247038960456848
  batch 220 loss_zero: 1.062656283378601
  batch 220 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8701 0.0 2.8696 1.2092
true 0.751 0.0 7.6016 1.4756
  batch 221 batch_avg_loss: 0.27744270240829
  batch 221 loss: 0.2876116931438446
  batch 221 loss_avg: 0.36530619859695435
  batch 221 loss_zero: 0.9292636513710022
  batch 221 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8074 0.0 2.7646 1.1398
true 0.7411 0.0 4.7188 1.4858
  batch 222 batch_avg_loss: 0.2773852233548422
  batch 222 loss: 0.2646823525428772
  batch 222 loss_avg: 0.326778382062912
  batch 222 loss_zero: 0.8760393857955933
  batch 222 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.731 0.0 3.0616 1.0795
true 0.8393 0.0 9.625 1.5571
  batch 223 batch_avg_loss: 0.27773085684252424
  batch 223 loss: 0.3544614911079407
  batch 223 loss_avg: 0.4080408215522766
  batch 223 loss_zero: 1.1124823093414307
  batch 223 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7134 0.0 2.6138 1.0211
true 0.806 0.0 6.2812 1.4961
  batch 224 batch_avg_loss: 0.2777684614993632
  batch 224 loss: 0.28615429997444153
  batch 224 loss_avg: 0.3291497826576233
  batch 224 loss_zero: 0.9787602424621582
  batch 224 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7359 0.0 2.3145 1.0519
true 0.7628 0.0 4.4844 1.4766
  batch 225 batch_avg_loss: 0.2776499486631817
  batch 225 loss: 0.25110307335853577
  batch 225 loss_avg: 0.307066410779953
  batch 225 loss_zero: 0.8888860940933228
  batch 225 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7625 0.0 2.3002 1.088
true 0.7748 0.0 4.2812 1.52
  batch 226 batch_avg_loss: 0.27757790862722737
  batch 226 loss: 0.26136890053749084
  batch 226 loss_avg: 0.34555572271347046
  batch 226 loss_zero: 0.9459086656570435
  batch 226 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.79 0.0 2.147 1.0754
true 0.7298 0.0 7.1016 1.5063
  batch 227 batch_avg_loss: 0.2775836048015939
  batch 227 loss: 0.27887094020843506
  batch 227 loss_avg: 0.38564279675483704
  batch 227 loss_zero: 0.9182633757591248
  batch 227 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8038 0.0 2.4139 1.0844
true 0.7365 0.0 4.3438 1.4414
  batch 228 batch_avg_loss: 0.2774658831195873
  batch 228 loss: 0.2507430613040924
  batch 228 loss_avg: 0.3141145408153534
  batch 228 loss_zero: 0.8565126657485962
  batch 228 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7965 0.0 2.5202 1.1017
true 0.718 0.0 3.4297 1.4102
  batch 229 batch_avg_loss: 0.2771920024307534
  batch 229 loss: 0.21474720537662506
  batch 229 loss_avg: 0.2721756100654602
  batch 229 loss_zero: 0.7876509428024292
  batch 229 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7704 0.0 2.4919 1.0746
true 0.8096 0.0 4.5781 1.5645
  batch 230 batch_avg_loss: 0.27704752832651136
  batch 230 loss: 0.24396295845508575
  batch 230 loss_avg: 0.35930773615837097
  batch 230 loss_zero: 1.0147709846496582
  batch 230 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7617 0.0 2.2026 1.0711
true 0.8121 0.0 5.3828 1.5542
  batch 231 batch_avg_loss: 0.27708357837035025
  batch 231 loss: 0.28537508845329285
  batch 231 loss_avg: 0.3779337406158447
  batch 231 loss_zero: 1.037436842918396
  batch 231 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7679 0.0 1.7217 1.1244
true 0.7482 0.0 3.1367 1.4487
  batch 232 batch_avg_loss: 0.276844360833538
  batch 232 loss: 0.22158510982990265
  batch 232 loss_avg: 0.2722499668598175
  batch 232 loss_zero: 0.8321060538291931
  batch 232 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7568 0.0 2.3265 1.0838
true 0.7359 0.0 7.125 1.4526
  batch 233 batch_avg_loss: 0.27675474802823535
  batch 233 loss: 0.25596457719802856
  batch 233 loss_avg: 0.3414711058139801
  batch 233 loss_zero: 0.8830912709236145
  batch 233 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7464 0.0 1.6647 1.0871
true 0.7589 0.0 4.6562 1.4731
  batch 234 batch_avg_loss: 0.27666677419955915
  batch 234 loss: 0.2561688721179962
  batch 234 loss_avg: 0.3092763125896454
  batch 234 loss_zero: 0.8852244019508362
  batch 234 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7341 0.0 1.7605 1.0633
true 0.7608 0.0 5.2031 1.4805
  batch 235 batch_avg_loss: 0.2765629792467077
  batch 235 loss: 0.2522749602794647
  batch 235 loss_avg: 0.32113581895828247
  batch 235 loss_zero: 0.89997798204422
  batch 235 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.728 0.0 1.8558 1.0231
true 0.73 0.0 3.9043 1.4414
  batch 236 batch_avg_loss: 0.27634959459557373
  batch 236 loss: 0.22620420157909393
  batch 236 loss_avg: 0.2852962911128998
  batch 236 loss_zero: 0.818203866481781
  batch 236 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7244 0.0 1.9707 0.9786
true 0.8408 0.0 6.9023 1.5605
  batch 237 batch_avg_loss: 0.27648763962184325
  batch 237 loss: 0.3090662658214569
  batch 237 loss_avg: 0.36439669132232666
  batch 237 loss_zero: 1.0712966918945312
  batch 237 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7445 0.0 1.9266 0.9811
true 0.863 0.0 4.4922 1.5752
  batch 238 batch_avg_loss: 0.2766249280642061
  batch 238 loss: 0.30916228890419006
  batch 238 loss_avg: 0.3498193919658661
  batch 238 loss_zero: 1.0946537256240845
  batch 238 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7822 0.0 1.8447 1.0386
true 0.732 0.0 4.7539 1.4883
  batch 239 batch_avg_loss: 0.27655202593015327
  batch 239 loss: 0.259201318025589
  batch 239 loss_avg: 0.3567850589752197
  batch 239 loss_zero: 0.8925705552101135
  batch 239 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8101 0.0 2.033 1.0786
true 0.8115 0.0 6.5039 1.5444
  batch 240 batch_avg_loss: 0.276567503126959
  batch 240 loss: 0.28026655316352844
  batch 240 loss_avg: 0.36250776052474976
  batch 240 loss_zero: 1.021034598350525
  batch 240 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8358 0.0 1.933 1.1449
true 0.7767 0.0 8.3516 1.4883
  batch 241 batch_avg_loss: 0.2767366029291232
  batch 241 loss: 0.3173205554485321
  batch 241 loss_avg: 0.38838616013526917
  batch 241 loss_zero: 0.9916936755180359
  batch 241 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8396 0.0 1.9887 1.198
true 0.7661 0.0 4.6875 1.4785
  batch 242 batch_avg_loss: 0.2766563177478215
  batch 242 loss: 0.25730758905410767
  batch 242 loss_avg: 0.303739070892334
  batch 242 loss_zero: 0.8906419277191162
  batch 242 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8179 0.0 3.3921 1.1249
true 0.8135 0.0 5.5547 1.5088
  batch 243 batch_avg_loss: 0.27659970368622755
  batch 243 loss: 0.26289910078048706
  batch 243 loss_avg: 0.34154966473579407
  batch 243 loss_zero: 1.0033552646636963
  batch 243 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.795 0.0 2.6713 1.1025
true 0.8211 0.0 4.3164 1.5586
  batch 244 batch_avg_loss: 0.2765629150461955
  batch 244 loss: 0.26762327551841736
  batch 244 loss_avg: 0.3556428551673889
  batch 244 loss_zero: 1.0298950672149658
  batch 244 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7805 0.0 2.5773 1.1161
true 0.7898 0.0 6.418 1.5337
  batch 245 batch_avg_loss: 0.2767003033234149
  batch 245 loss: 0.3102230429649353
  batch 245 loss_avg: 0.39674150943756104
  batch 245 loss_zero: 1.0204780101776123
  batch 245 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7708 0.0 3.1429 1.0956
true 0.7486 0.0 7.2031 1.4766
  batch 246 batch_avg_loss: 0.276746960735418
  batch 246 loss: 0.288178026676178
  batch 246 loss_avg: 0.37616240978240967
  batch 246 loss_zero: 0.9365108609199524
  batch 246 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7561 0.0 2.891 1.1216
true 0.7665 0.0 3.9062 1.4971
  batch 247 batch_avg_loss: 0.2765627917249193
  batch 247 loss: 0.23125721514225006
  batch 247 loss_avg: 0.30914127826690674
  batch 247 loss_zero: 0.8966889381408691
  batch 247 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7455 0.0 3.2823 1.0988
true 0.7726 0.0 4.8516 1.4961
  batch 248 batch_avg_loss: 0.27649945849853175
  batch 248 loss: 0.26085615158081055
  batch 248 loss_avg: 0.31699445843696594
  batch 248 loss_zero: 0.9139508605003357
  batch 248 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7412 0.0 2.1894 1.0433
true 0.7442 0.0 5.2812 1.4482
  batch 249 batch_avg_loss: 0.27629385302105103
  batch 249 loss: 0.22530369460582733
  batch 249 loss_avg: 0.29820138216018677
  batch 249 loss_zero: 0.852006196975708
  batch 249 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7376 0.0 2.3569 1.0542
true 0.7155 0.0 6.0273 1.4062
  batch 250 batch_avg_loss: 0.27615163451433183
  batch 250 loss: 0.24073922634124756
  batch 250 loss_avg: 0.2960837185382843
  batch 250 loss_zero: 0.8080862760543823
  batch 250 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7258 0.0 2.0291 0.9787
true 0.7699 0.0 5.0547 1.4839
  batch 251 batch_avg_loss: 0.27607259172129917
  batch 251 loss: 0.25631189346313477
  batch 251 loss_avg: 0.3340003788471222
  batch 251 loss_zero: 0.926708996295929
  batch 251 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.736 0.0 2.4074 0.9995
true 0.8072 0.0 6.9141 1.5088
  batch 252 batch_avg_loss: 0.2760417726896112
  batch 252 loss: 0.2683061957359314
  batch 252 loss_avg: 0.3191446363925934
  batch 252 loss_zero: 0.9707127809524536
  batch 252 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7713 0.0 2.1893 1.056
true 0.7623 0.0 6.8867 1.4893
  batch 253 batch_avg_loss: 0.2761425303494035
  batch 253 loss: 0.30153346061706543
  batch 253 loss_avg: 0.3913124203681946
  batch 253 loss_zero: 0.9724494814872742
  batch 253 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8042 0.0 2.3682 1.0748
true 0.8153 0.0 5.9375 1.5479
  batch 254 batch_avg_loss: 0.2762089951887844
  batch 254 loss: 0.29302459955215454
  batch 254 loss_avg: 0.3761064112186432
  batch 254 loss_zero: 1.040819525718689
  batch 254 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8291 0.0 2.813 1.1731
true 0.7519 0.0 5.8555 1.4805
  batch 255 batch_avg_loss: 0.27620335776431887
  batch 255 loss: 0.27477145195007324
  batch 255 loss_avg: 0.35901832580566406
  batch 255 loss_zero: 0.9244065284729004
  batch 255 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.833 0.0 3.3472 1.1602
true 0.7352 0.0 3.3555 1.4307
  batch 256 batch_avg_loss: 0.276073572342284
  batch 256 loss: 0.2429782897233963
  batch 256 loss_avg: 0.2814604938030243
  batch 256 loss_zero: 0.82197105884552
  batch 256 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8025 0.0 2.7181 1.1161
true 0.7531 0.0 4.5117 1.4497
  batch 257 batch_avg_loss: 0.27605810877414066
  batch 257 loss: 0.27209943532943726
  batch 257 loss_avg: 0.29965242743492126
  batch 257 loss_zero: 0.8667837381362915
  batch 257 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7618 0.0 3.2915 Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs0000000320265b1f00000135'
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs0000000340515c7200000137'
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs000000036045c97a00000136'
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000003003b1b9000000134'
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:81: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  kernel_self = nn.Parameter(self.kernel_initializer(torch.empty(self.F, self.F_)))
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:82: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  kernel_neighs = nn.Parameter(self.kernel_initializer(torch.empty(self.F, self.F_)))
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:89: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  attn_kernel_self = nn.Parameter(self.attn_kernel_initializer(torch.empty(self.F_, 1)))
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:90: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  attn_kernel_neighs = nn.Parameter(self.attn_kernel_initializer(torch.empty(self.F_, 1)))
1.0386
true 0.7384 0.0 6.9609 1.4702
  batch 258 batch_avg_loss: 0.2761448983305184
  batch 258 loss: 0.2984498143196106
  batch 258 loss_avg: 0.40279990434646606
  batch 258 loss_zero: 0.9480332732200623
  batch 258 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7262 0.0 2.2222 1.0056
true 0.763 0.0 5.4648 1.4883
  batch 259 batch_avg_loss: 0.2760705615332688
  batch 259 loss: 0.256891667842865
  batch 259 loss_avg: 0.3362013101577759
  batch 259 loss_zero: 0.9183637499809265
  batch 259 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7047 0.0 2.0162 0.9645
true 0.7022 0.0 4.5234 1.3926
  batch 260 batch_avg_loss: 0.2759040582065399
  batch 260 loss: 0.23277969658374786
  batch 260 loss_avg: 0.29864591360092163
  batch 260 loss_zero: 0.7917834520339966
  batch 260 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6883 0.0 2.2143 0.9484
true 0.7552 0.0 6.6328 1.459
  batch 261 batch_avg_loss: 0.27593298724556337
  batch 261 loss: 0.2834545373916626
  batch 261 loss_avg: 0.3244748115539551
  batch 261 loss_zero: 0.8948332071304321
  batch 261 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.6922 0.0 3.046 0.8951
true 0.7664 0.0 4.332 1.4761
  batch 262 batch_avg_loss: 0.2758853322335782
  batch 262 loss: 0.2634473741054535
  batch 262 loss_avg: 0.3331020772457123
  batch 262 loss_zero: 0.9205042123794556
  batch 262 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7172 0.0 2.4463 0.9466
true 0.7914 0.0 3.8828 1.4907
  batch 263 batch_avg_loss: 0.2757621665304605
  batch 263 loss: 0.2434927523136139
  batch 263 loss_avg: 0.3031744658946991
  batch 263 loss_zero: 0.9294577836990356
  batch 263 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7595 0.0 2.1224 1.0562
true 0.71 0.0 4.9141 1.4121
  batch 264 batch_avg_loss: 0.27558333883908664
  batch 264 loss: 0.22855165600776672
  batch 264 loss_avg: 0.30172765254974365
  batch 264 loss_zero: 0.8058069944381714
  batch 264 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7827 0.0 2.305 1.0429
true 0.7441 0.0 4.3086 1.4844
  batch 265 batch_avg_loss: 0.27554021010983665
  batch 265 loss: 0.26415422558784485
  batch 265 loss_avg: 0.3395037353038788
  batch 265 loss_zero: 0.8932163715362549
  batch 265 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7867 0.0 1.9869 1.1109
true 0.7297 0.0 4.7305 1.4375
  batch 266 batch_avg_loss: 0.2753971208979313
  batch 266 loss: 0.23747847974300385
  batch 266 loss_avg: 0.2884107232093811
  batch 266 loss_zero: 0.8209086060523987
  batch 266 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7743 0.0 2.5018 1.0552
true 0.7416 0.0 6.3906 1.4536
  batch 267 batch_avg_loss: 0.27543089630898465
  batch 267 loss: 0.2844151556491852
  batch 267 loss_avg: 0.34958145022392273
  batch 267 loss_zero: 0.8995311856269836
  batch 267 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7538 0.0 1.9572 1.0344
true 0.7809 0.0 4.0938 1.4883
  batch 268 batch_avg_loss: 0.27527700325668747
  batch 268 loss: 0.2341875582933426
  batch 268 loss_avg: 0.29917091131210327
  batch 268 loss_zero: 0.9089913368225098
  batch 268 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7391 0.0 2.3749 0.9943
true 0.7955 0.0 6.7383 1.5264
  batch 269 batch_avg_loss: 0.27532469445223257
  batch 269 loss: 0.28810593485832214
  batch 269 loss_avg: 0.36922526359558105
  batch 269 loss_zero: 1.0020979642868042
  batch 269 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7418 0.0 2.0685 1.0035
true 0.8045 0.0 3.7832 1.5103
  batch 270 batch_avg_loss: 0.27516287686648194
  batch 270 loss: 0.23163394629955292
  batch 270 loss_avg: 0.2976585328578949
  batch 270 loss_zero: 0.9448428750038147
  batch 270 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7586 0.0 2.3536 1.0033
true 0.7742 0.0 4.625 1.4805
  batch 271 batch_avg_loss: 0.27513799060314786
  batch 271 loss: 0.26841869950294495
  batch 271 loss_avg: 0.3310321867465973
  batch 271 loss_zero: 0.9303715229034424
  batch 271 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7756 0.0 2.6901 1.0527
true 0.737 0.0 4.668 1.4419
  batch 272 batch_avg_loss: 0.27501925190581994
  batch 272 loss: 0.24284106492996216
  batch 272 loss_avg: 0.31224527955055237
  batch 272 loss_zero: 0.8553634285926819
  batch 272 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7815 0.0 2.2804 1.0564
true 0.816 0.0 4.4219 1.5264
  batch 273 batch_avg_loss: 0.27496712177227706
  batch 273 loss: 0.2607877254486084
  batch 273 loss_avg: 0.32122546434402466
  batch 273 loss_zero: 0.9871147871017456
  batch 273 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7955 0.0 2.737 1.1018
true 0.765 0.0 4.2734 1.4863
  batch 274 batch_avg_loss: 0.2748541192416727
  batch 274 loss: 0.24400442838668823
  batch 274 loss_avg: 0.3102143406867981
  batch 274 loss_zero: 0.8953827023506165
  batch 274 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8004 0.0 2.4438 1.077
true 0.7621 0.0 7.0781 1.4863
  batch 275 batch_avg_loss: 0.27483804908665743
  batch 275 loss: 0.27043482661247253
  batch 275 loss_avg: 0.36795574426651
  batch 275 loss_zero: 0.9487856030464172
  batch 275 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7918 0.0 2.6037 1.066
true 0.8423 0.0 4.7266 1.5508
  batch 276 batch_avg_loss: 0.27482247924891073
  batch 276 loss: 0.2705407738685608
  batch 276 loss_avg: 0.34018149971961975
  batch 276 loss_zero: 1.049617052078247
  batch 276 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7981 0.0 2.6289 1.1132
true 0.7807 0.0 7.1641 1.5273
  batch 277 batch_avg_loss: 0.2749029918698197
  batch 277 loss: 0.2971244752407074
  batch 277 loss_avg: 0.38954803347587585
  batch 277 loss_zero: 0.9990414977073669
  batch 277 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7975 0.0 2.7839 1.109
true 0.8292 0.0 6.9648 1.5508
  batch 278 batch_avg_loss: 0.2749212751928851
  batch 278 loss: 0.2799857556819916
  batch 278 loss_avg: 0.36567333340644836
  batch 278 loss_zero: 1.053234338760376
  batch 278 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8051 0.0 3.1098 1.1556
true 0.8019 0.0 3.9355 1.5264
  batch 279 batch_avg_loss: 0.27478912392611143
  batch 279 loss: 0.23805107176303864
  batch 279 loss_avg: 0.3032456040382385
  batch 279 loss_zero: 0.9463544487953186
  batch 279 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8079 0.0 3.0175 1.1375
true 0.7792 0.0 4.5781 1.5073
  batch 280 batch_avg_loss: 0.27468109620468956
  batch 280 loss: 0.24454136192798615
  batch 280 loss_avg: 0.3550977110862732
  batch 280 loss_zero: 0.9622905850410461
  batch 280 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8025 0.0 2.326 1.1675
true 0.8017 0.0 9.1797 1.5117
  batch 281 batch_avg_loss: 0.2747972636248293
  batch 281 loss: 0.3073241412639618
  batch 281 loss_avg: 0.39935803413391113
  batch 281 loss_zero: 1.04215407371521
  batch 281 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7974 0.0 2.9584 1.1204
true 0.8092 0.0 5.5781 1.543
  batch 282 batch_avg_loss: 0.2747840131005497
  batch 282 loss: 0.27106061577796936
  batch 282 loss_avg: 0.3331913650035858
  batch 282 loss_zero: 0.9879945516586304
  batch 282 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7923 0.0 2.0414 1.1202
true 0.7381 0.0 6.4062 1.4502
  batch 283 batch_avg_loss: 0.27476380539024675
  batch 283 loss: 0.2690652310848236
  batch 283 loss_avg: 0.32996174693107605
  batch 283 loss_zero: 0.8747560381889343
  batch 283 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.775 0.0 2.9958 1.0449
true 0.7679 0.0 4.9688 1.4766
  batch 284 batch_avg_loss: 0.27465828859680136
  batch 284 loss: 0.24479703605175018
  batch 284 loss_avg: 0.33157265186309814
  batch 284 loss_zero: 0.9211815595626831
  batch 284 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7595 0.0 2.7691 1.0317
true 0.7931 0.0 5.4219 1.5142
  batch 285 batch_avg_loss: 0.27463963005626413
  batch 285 loss: 0.2693406045436859
  batch 285 loss_avg: 0.3451893925666809
  batch 285 loss_zero: 0.9741349220275879
  batch 285 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7535 0.0 1.9333 1.0388
true 0.8277 0.0 4.7188 1.5508
  batch 286 batch_avg_loss: 0.27468091494345165
  batch 286 loss: 0.28644710779190063
  batch 286 loss_avg: 0.35379430651664734
  batch 286 loss_zero: 1.0388386249542236
  batch 286 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7642 0.0 2.2396 1.0604
true 0.6944 0.0 5.125 1.3896
  batch 287 batch_avg_loss: 0.27460532492669204
  batch 287 loss: 0.2529865801334381
  batch 287 loss_avg: 0.2872738838195801
  batch 287 loss_zero: 0.769434928894043
  batch 287 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7576 0.0 2.4778 1.0258
true 0.806 0.0 5.4922 1.5088
  batch 288 batch_avg_loss: 0.27463369604407084
  batch 288 loss: 0.28277620673179626
  batch 288 loss_avg: 0.3550799489021301
  batch 288 loss_zero: 1.0047051906585693
  batch 288 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.764 0.0 1.8697 1.0527
true 0.7767 0.0 4.4492 1.4922
  batch 289 batch_avg_loss: 0.2745658764067818
  batch 289 loss: 0.25503382086753845
  batch 289 loss_avg: 0.3166787922382355
  batch 289 loss_zero: 0.9198839068412781
  batch 289 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7707 0.0 2.1987 1.0358
true 0.774 0.0 5.8164 1.4883
  batch 290 batch_avg_loss: 0.2745401912208261
  batch 290 loss: 0.2671171724796295
  batch 290 loss_avg: 0.32660993933677673
  batch 290 loss_zero: 0.9256301522254944
  batch 290 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7779 0.0 2.8313 1.0383
true 0.7605 0.0 6.4609 1.4375
  batch 291 batch_avg_loss: 0.2744900759860003
  batch 291 loss: 0.2599566578865051
  batch 291 loss_avg: 0.314450204372406
  batch 291 loss_zero: 0.8928855061531067
  batch 291 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7786 0.0 2.0259 1.0447
true 0.742 0.0 4.6953 1.4629
  batch 292 batch_avg_loss: 0.274391778680968
  batch 292 loss: 0.24578726291656494
  batch 292 loss_avg: 0.2989669740200043
  batch 292 loss_zero: 0.849489688873291
  batch 292 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7735 0.0 1.9042 1.0209
true 0.7399 0.0 4.4219 1.4175
  batch 293 batch_avg_loss: 0.2742514670810602
  batch 293 loss: 0.2332804799079895
  batch 293 loss_avg: 0.27540698647499084
  batch 293 loss_zero: 0.8228509426116943
  batch 293 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7598 0.0 1.9366 1.0179
true 0.7906 0.0 5.8789 1.5493
  batch 294 batch_avg_loss: 0.27435225648742145
  batch 294 loss: 0.30388355255126953
  batch 294 loss_avg: 0.3985019326210022
  batch 294 loss_zero: 1.0236085653305054
  batch 294 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7562 0.0 1.862 1.012
true 0.8069 0.0 5.4609 1.5352
  batch 295 batch_avg_loss: 0.2743353294619059
  batch 295 loss: 0.2693587839603424
  batch 295 loss_avg: 0.3560130298137665
  batch 295 loss_zero: 1.007122278213501
  batch 295 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7648 0.0 2.3276 1.0518
true 0.8098 0.0 5.3242 1.5391
  batch 296 batch_avg_loss: 0.27437665308448106
  batch 296 loss: 0.2865671217441559
  batch 296 loss_avg: 0.3664702773094177
  batch 296 loss_zero: 1.0221922397613525
  batch 296 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7814 0.0 2.2839 1.0855
true 0.8066 0.0 6.5391 1.5586
  batch 297 batch_avg_loss: 0.27444996220696255
  batch 297 loss: 0.29614946246147156
  batch 297 loss_avg: 0.3836413323879242
  batch 297 loss_zero: 1.034271240234375
  batch 297 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8011 0.0 2.9833 1.1276
true 0.8345 0.0 4.6719 1.5293
  batch 298 batch_avg_loss: 0.27448248578198003
  batch 298 loss: 0.28414198756217957
  batch 298 loss_avg: 0.3464724123477936
  batch 298 loss_zero: 1.0428946018218994
  batch 298 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.824 0.0 2.2243 1.1996
true 0.7382 0.0 4.3281 1.4414
  batch 299 batch_avg_loss: 0.274385588075405
  batch 299 loss: 0.245510071516037
  batch 299 loss_avg: 0.2839326560497284
  batch 299 loss_zero: 0.8289097547531128
  batch 299 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8139 0.0 3.3435 1.1583
true 0.7661 0.0 6.75 1.5039
  batch 300 batch_avg_loss: 0.2745851622521877
  batch 300 loss: 0.3342578411102295
  batch 300 loss_avg: 0.37170645594596863
  batch 300 loss_zero: 0.9586475491523743
  batch 300 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7924 0.0 3.0062 1.1259
true 0.7104 0.0 4.8047 1.4395
  batch 301 batch_avg_loss: 0.27450420605977904
  batch 301 loss: 0.25021734833717346
  batch 301 loss_avg: 0.32457658648490906
  batch 301 loss_zero: 0.8293022513389587
  batch 301 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7626 0.0 1.9584 1.0668
true 0.8294 0.0 4.3906 1.5522
  batch 302 batch_avg_loss: 0.2745019149602644
  batch 302 loss: 0.27381229400634766
  batch 302 loss_avg: 0.3483673334121704
  batch 302 loss_zero: 1.0362944602966309
  batch 302 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7492 0.0 2.4199 0.9916
true 0.7532 0.0 6.0 1.4702
  batch 303 batch_avg_loss: 0.2745343160019456
  batch 303 loss: 0.2843194305896759
  batch 303 loss_avg: 0.3704604506492615
  batch 303 loss_zero: 0.9378213286399841
  batch 303 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.739 0.0 2.2052 0.967
true 0.7904 0.0 6.6133 1.4902
  batch 304 batch_avg_loss: 0.27453304763491215
  batch 304 loss: 0.27414873242378235
  batch 304 loss_avg: 0.33611437678337097
  batch 304 loss_zero: 0.9608433246612549
  batch 304 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7415 0.0 2.1517 1.0016
true 0.8268 0.0 4.2148 1.5625
  batch 305 batch_avg_loss: 0.2745351396134642
  batch 305 loss: 0.27517110109329224
  batch 305 loss_avg: 0.3446612060070038
  batch 305 loss_zero: 1.028254747390747
  batch 305 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 104])
pred 0.7581 0.0 3.0531 1.008
true 0.7348 0.0 4.3086 1.4336
  batch 306 batch_avg_loss: 0.274398094396186
  batch 306 loss: 0.23259930312633514
  batch 306 loss_avg: 0.27657708525657654
  batch 306 loss_zero: 0.8165444731712341
  batch 306 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7699 0.0 2.2836 1.0466
true 0.8315 0.0 4.5781 1.5464
  batch 307 batch_avg_loss: 0.2743789703139265
  batch 307 loss: 0.26852700114250183
  batch 307 loss_avg: 0.32063212990760803
  batch 307 loss_zero: 1.0119737386703491
  batch 307 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.7907 0.0 2.0522 1.0726
true 0.8493 0.0 6.8867 1.5605
  batch 308 batch_avg_loss: 0.2745628079230135
  batch 308 loss: 0.331000953912735
  batch 308 loss_avg: 0.4078954756259918
  batch 308 loss_zero: 1.1292860507965088
  batch 308 loss_ideal: 0.0
  torch.Size([64, 10400, 4])
  torch.Size([64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 4, 10400])
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
torch.Size([32, 64, 104])
torch.Size([32, 104])
pred 0.8203 0.0 2.633 1.1103
true 0.7728 0.0 5.5664 1.4858
  batch 309 batch_avg_loss: 0.27449442393185636
  batch 309 loss: 0.25343215465545654
  batch 309 loss_avg: 0.3093351721763611
  batch 309 loss_zero: 0.9065061807632446
  batch 309 loss_ideal: 0.0
  torch.Size([47, 10400, 4])
  torch.Size([47, 104])
torch.Size([24, 4, 10400])
torch.Size([24, 64, 104])
torch.Size([23, 4, 10400])
torch.Size([23, 64, 104])
torch.Size([24, 64, 104])
torch.Size([24, 104])
torch.Size([23, 64, 104])
torch.Size([23, 104])
pred 0.8367 0.0 2.8205 1.1508
true 0.8032 0.0 6.4062 1.5352
  batch 310 batch_avg_loss: 0.27445318006700087
  batch 310 loss: 0.2617088258266449
  batch 310 loss_avg: 0.34615376591682434
  batch 310 loss_zero: 0.9912835955619812
  batch 310 loss_ideal: 0.0
  LOSS train = 0.27445318006700087 validation = 0.27445318006700087
  Finding best model:
  Seq best model = 1 Val loss = 0.27
Finding best seq model....
Best seq model found = ../output/experiment_name/train_out/seqnet/best_seq_model_epoch_1_val_loss_0.27.pt

--> Training bimodal
DEVICE = cuda
####################
../output/experiment_name/train_out/seqnet/best_seq_model_epoch_1_val_loss_0.27.pt
####################
init - bimodal_network_GAT
Proxy(getattr_1)
Proxy(getattr_2)
Proxy(getattr_3)
Proxy(getattr_4)
Proxy(getattr_1)
Proxy(getattr_2)
Proxy(getattr_3)
Proxy(getattr_4)
bimodal_network_GAT(
  (base_model): seq_network(
    (conv1): Conv1d(4, 32, kernel_size=(21,), stride=(1,), padding=same)
    (relu1): ReLU()
    (batch_norm1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (maxpool1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (dropout2): Dropout(p=0.5, inplace=False)
    (conv2): Conv1d(32, 64, kernel_size=(3,), stride=(1,), padding=same)
    (relu2): ReLU()
    (batch_norm2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (maxpool2): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (dropout3): Dropout(p=0.5, inplace=False)
    (conv3): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=same)
    (relu3): ReLU()
    (batch_norm3): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (maxpool3): MaxPool1d(kernel_size=5, stride=5, padding=0, dilation=1, ceil_mode=False)
    (dropout4): Dropout(p=0.5, inplace=False)
    (conv4): Conv1d(128, 64, kernel_size=(3,), stride=(1,), padding=same)
    (relu4): ReLU()
    (batch_norm4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (maxpool4): MaxPool1d(kernel_size=5, stride=5, padding=0, dilation=1, ceil_mode=False)
  )
  (conv1): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=same)
  (batch_norm1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (maxpool1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=same)
  (batch_norm2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (maxpool2): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (chrom_model): GAT_network(
    (att): ParameterList(
        (0): Object of type: GraphAttention
        (1): Object of type: GraphAttention
        (2): Object of type: GraphAttention
        (3): Object of type: GraphAttention
        (4): Object of type: GraphAttention
      (0): GraphAttention(
        (activation): ELU(alpha=1.0)
        (kernels): ParameterList(
            (0): Object of type: ParameterList
            (1): Object of type: ParameterList
            (2): Object of type: ParameterList
            (3): Object of type: ParameterList
          (0): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (3): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
        )
        (biases): ParameterList()
        (attn_kernels): ParameterList(
            (0): Object of type: ParameterList
            (1): Object of type: ParameterList
            (2): Object of type: ParameterList
            (3): Object of type: ParameterList
          (0): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (3): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
        )
      )
      (1): GraphAttention(
        (activation): ELU(alpha=1.0)
        (kernels): ParameterList(
            (0): Object of type: ParameterList
            (1): Object of type: ParameterList
            (2): Object of type: ParameterList
            (3): Object of type: ParameterList
          (0): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (3): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
        )
        (biases): ParameterList()
        (attn_kernels): ParameterList(
            (0): Object of type: ParameterList
            (1): Object of type: ParameterList
            (2): Object of type: ParameterList
            (3): Object of type: ParameterList
          (0): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (3): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
        )
      )
      (2): GraphAttention(
        (activation): ELU(alpha=1.0)
        (kernels): ParameterList(
            (0): Object of type: ParameterList
            (1): Object of type: ParameterList
            (2): Object of type: ParameterList
            (3): Object of type: ParameterList
          (0): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (3): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
        )
        (biases): ParameterList()
        (attn_kernels): ParameterList(
            (0): Object of type: ParameterList
            (1): Object of type: ParameterList
            (2): Object of type: ParameterList
            (3): Object of type: ParameterList
          (0): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (3): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
        )
      )
      (3): GraphAttention(
        (activation): ELU(alpha=1.0)
        (kernels): ParameterList(
            (0): Object of type: ParameterList
            (1): Object of type: ParameterList
            (2): Object of type: ParameterList
            (3): Object of type: ParameterList
          (0): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (3): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
        )
        (biases): ParameterList()
        (attn_kernels): ParameterList(
            (0): Object of type: ParameterList
            (1): Object of type: ParameterList
            (2): Object of type: ParameterList
            (3): Object of type: ParameterList
          (0): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (3): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
        )
      )
      (4): GraphAttention(
        (activation): ELU(alpha=1.0)
        (kernels): ParameterList(
            (0): Object of type: ParameterList
            (1): Object of type: ParameterList
            (2): Object of type: ParameterList
            (3): Object of type: ParameterList
          (0): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
          (3): ParameterList(
              (0): Parameter containing: [torch.float32 of size 128x32]
              (1): Parameter containing: [torch.float32 of size 128x32]
          )
        )
        (biases): ParameterList()
        (attn_kernels): ParameterList(
            (0): Object of type: ParameterList
            (1): Object of type: ParameterList
            (2): Object of type: ParameterList
            (3): Object of type: ParameterList
          (0): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
          (3): ParameterList(
              (0): Parameter containing: [torch.float32 of size 32x1]
              (1): Parameter containing: [torch.float32 of size 32x1]
          )
        )
      )
    )
    (bn_layers): ParameterList(
        (0): Object of type: BatchNorm1d
        (1): Object of type: BatchNorm1d
        (2): Object of type: BatchNorm1d
        (3): Object of type: BatchNorm1d
        (4): Object of type: BatchNorm1d
      (0): BatchNorm1d(26, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (1): BatchNorm1d(26, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): BatchNorm1d(26, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (3): BatchNorm1d(26, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (4): BatchNorm1d(26, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (permute): permute()
    (conv1): Conv1d(128, 64, kernel_size=(3,), stride=(1,), padding=same)
    (batch_norm1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (maxpool1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (dropout2): Dropout(p=0.5, inplace=False)
    (conv2): Conv1d(64, 32, kernel_size=(3,), stride=(1,), padding=same)
    (batch_norm2): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (maxpool2): MaxPool1d(kernel_size=5, stride=5, padding=0, dilation=1, ceil_mode=False)
    (dropout3): Dropout(p=0.5, inplace=False)
    (conv3): Conv1d(32, 1, kernel_size=(3,), stride=(1,), padding=same)
    (batch_norm3): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (maxpool3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (sigmoid): Sigmoid()
)
training_df_bimodal_bound
(333, 5)
label
1    333
Name: count, dtype: int64
training_df_bimodal_unbound
(1332, 5)
label
0    1332
Name: count, dtype: int64
  bound_sample_all_dataset data size = 333
  unbound_genome_dataset data size = 1332

EPOCH 0/1
  Training (bimodal):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
OSError: [Errno 16] Device or resource busy: '.nfs0000000000e957b400000139'
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs000000006000b61400000138'
OSError: [Errno 16] Device or resource busy: '.nfs00000000402c63d40000013b'
OSError: [Errno 16] Device or resource busy: '.nfs000000002004a64a0000013a'

Batch 0 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 0 batch_avg_train_loss: 0.8998687267303467

Batch 1 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 1 batch_avg_train_loss: 0.8793093860149384

Batch 2 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 2 batch_avg_train_loss: 0.794045627117157

Batch 3 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 3 batch_avg_train_loss: 0.7636362612247467

Batch 4 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 4 batch_avg_train_loss: 0.730402135848999

Batch 5 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 5 batch_avg_train_loss: 0.713654359181722

Batch 6 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 6 batch_avg_train_loss: 0.6972504513604301

Batch 7 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 7 batch_avg_train_loss: 0.6848674565553665

Batch 8 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 8 batch_avg_train_loss: 0.6740950213538276

Batch 9 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 9 batch_avg_train_loss: 0.6683840394020081

Batch 10 (bimodal)
  (torch.Size([13, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([13, 26, 26]), torch.Size([32, 26, 26]))
  (13, 32)
  Bound & Unbound sizes are not equal
  (torch.Size([13, 10400, 4]), torch.Size([13, 10400, 4]))
  (torch.Size([13, 26, 26]), torch.Size([13, 26, 26]))
  (13, 13)
  torch.Size([26, 4, 10400])
  torch.Size([26, 26, 26])
  torch.Size([26, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([13, 64, 104])
torch.Size([13, 128, 26])
torch.Size([13, 26, 26])
####################
torch.Size([13, 26, 128])
torch.Size([13, 64, 104])
torch.Size([13, 128, 26])
torch.Size([13, 26, 26])
####################
torch.Size([13, 26, 128])
GAT output shape = torch.Size([13, 128, 26])
GAT output shape = torch.Size([13, 128, 26])
torch.Size([13, 1, 1])
GAT output shape = torch.Size([13, 1])
  h = torch.Size([13, 64, 104])
  adj = torch.Size([13, 26, 26])
  xc = torch.Size([13, 1])
torch.Size([13, 1, 1])
GAT output shape = torch.Size([13, 1])
  h = torch.Size([13, 64, 104])
  adj = torch.Size([13, 26, 26])
  xc = torch.Size([13, 1])
  batch 10 batch_avg_train_loss: 0.6557188467545942
  LOSS train = 0.6557188467545942

EPOCH 1/1
  Training (bimodal):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000000c06a5bb30000013e'
OSError: [Errno 16] Device or resource busy: '.nfs000000008053744a0000013f'
OSError: [Errno 16] Device or resource busy: '.nfs00000000a067511c0000013c'
OSError: [Errno 16] Device or resource busy: '.nfs00000000e02821ee0000013d'
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000003801dbefb00000140'
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000003c05392e200000141'
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000003a0b8e12d00000142'
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000003e0812ff100000143'
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:81: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  kernel_self = nn.Parameter(self.kernel_initializer(torch.empty(self.F, self.F_)))
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:82: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  kernel_neighs = nn.Parameter(self.kernel_initializer(torch.empty(self.F, self.F_)))
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:89: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  attn_kernel_self = nn.Parameter(self.attn_kernel_initializer(torch.empty(self.F_, 1)))
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:90: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  attn_kernel_neighs = nn.Parameter(self.attn_kernel_initializer(torch.empty(self.F_, 1)))

Batch 0 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 0 batch_avg_train_loss: 0.545163631439209

Batch 1 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 1 batch_avg_train_loss: 0.5241947770118713

Batch 2 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 2 batch_avg_train_loss: 0.5679070353507996

Batch 3 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 3 batch_avg_train_loss: 0.5870385617017746

Batch 4 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 4 batch_avg_train_loss: 0.5841909766197204

Batch 5 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 5 batch_avg_train_loss: 0.5824161469936371

Batch 6 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 6 batch_avg_train_loss: 0.580722485269819

Batch 7 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 7 batch_avg_train_loss: 0.5812920555472374

Batch 8 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 8 batch_avg_train_loss: 0.5788394278950162

Batch 9 (bimodal)
  (torch.Size([32, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([32, 26, 26]), torch.Size([32, 26, 26]))
  (32, 32)
  torch.Size([64, 4, 10400])
  torch.Size([64, 26, 26])
  torch.Size([64, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([32, 64, 104])
torch.Size([32, 64, 104])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
torch.Size([32, 128, 26])
torch.Size([32, 26, 26])
####################
torch.Size([32, 26, 128])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
GAT output shape = torch.Size([32, 128, 26])
torch.Size([32, 1, 1])
GAT output shape = torch.Size([32, 1])
  h = torch.Size([32, 64, 104])
  adj = torch.Size([32, 26, 26])
  xc = torch.Size([32, 1])
  batch 9 batch_avg_train_loss: 0.5805745959281922

Batch 10 (bimodal)
  (torch.Size([13, 10400, 4]), torch.Size([32, 10400, 4]))
  (torch.Size([13, 26, 26]), torch.Size([32, 26, 26]))
  (13, 32)
  Bound & Unbound sizes are not equal
  (torch.Size([13, 10400, 4]), torch.Size([13, 10400, 4]))
  (torch.Size([13, 26, 26]), torch.Size([13, 26, 26]))
  (13, 13)
  torch.Size([26, 4, 10400])
  torch.Size([26, 26, 26])
  torch.Size([26, 1])
  Forward - bimodal_network_GAT
  Forward - bimodal_network_GAT
torch.Size([13, 64, 104])
torch.Size([13, 64, 104])
torch.Size([13, 128, 26])
torch.Size([13, 26, 26])
####################
torch.Size([13, 26, 128])
torch.Size([13, 128, 26])
torch.Size([13, 26, 26])
####################
torch.Size([13, 26, 128])
GAT output shape = torch.Size([13, 128, 26])
torch.Size([13, 1, 1])
GAT output shape = torch.Size([13, 1])
  h = torch.Size([13, 64, 104])
  adj = torch.Size([13, 26, 26])
  xc = torch.Size([13, 1])
GAT output shape = torch.Size([13, 128, 26])
torch.Size([13, 1, 1])
GAT output shape = torch.Size([13, 1])
  h = torch.Size([13, 64, 104])
  adj = torch.Size([13, 26, 26])
  xc = torch.Size([13, 1])
  batch 10 batch_avg_train_loss: 0.5749474005265669
  LOSS train = 0.5749474005265669
  Finding best model:
  Bimodal best model = 1 best_model_train_loss = 0.57
Finding best bimodal model....
Best bimodal model found = ../output/experiment_name/train_out/bimodal/best_bimodal_model_epoch_1_train_loss_batch_avg_0.57.pt

--> Predict test-set performance of best models
  ../output/experiment_name/training_data/test_df_internal.bed
# Number of Epochs
EPOCHS = 2

# batch size
batchsize = 64


# Fraction of data to be used to construct training and test set            
frac = 0.005

# stride for generating onehot_seq_dict & chip-seq hdf5 file
stride = 50

# prediction region length
window_len = 400

# context around prediction region
context_window_len = 10_000

# stride used for chopping genome during training set construction
chop_genome_stride=50

# number of times to oversample chip-seq (positive) regions in training set
num_oversample_chip_seq_peaks = 5

# output path
out_path = "../output"

# input data path
in_path = "../input/raw_data-Ascl1_12hr_real"

# experiment name (directory with this name will be create in out_path
exp_name="experiment_name"

# training data directory name
training_data_dir_name="training_data"

# train out directory name
train_out_dir_name="train_out"

# test results directory path
test_result_dir_name="test_set_performance"

# path to seq_onehot dictionary
seq_onehot_dict_out_path = f"{out_path}/common_data/onehot_seq_dict"

# path to genome sizes file
info = f"{in_path}/mm10_random_removed.info"

# path to genome fasta file
fa = f"{in_path}/mm10.fa"

# path to chip seq hdf5 file
hdf5_chromatin_tracks_out_path = f"{out_path}/common_data/hdf5_Ascl1"


#chromatin_tracks_path = f"{in_path}"

# path to chip seq bigwig file in the list
chromatin_tracks_path_list =[
    f"{in_path}/Ascl1_R1_R2_R3_rep_avg.bw"
]

# path to MultiGPS .event file
peaks = f"{in_path}/multigps_2023-03-30-05-43-08_ES.events"

# path to blacklist regions .bed file
blacklist = f"{in_path}/mm10_blacklist.bed"

# list training chromosomes
training_chrom_list = ["chr1"]

# list of validation chromosomes
val_chroms = ["chr17"]

# list of test chromosomes
test_chroms = ["chr10"]

# path to cool .file
cool_file_path = f"{in_path}/GSE130275_mESC_WT_combined_1.3B_400_normalized.cool"

# resolution of .cool file
resolution = window_len

# model params (note: you may need to modify model parameters inside seq_and_bimodal_networks_ResNet.py)
model_params_dict = {"dense_layers": 3,
                     "n_filters": 240,
                     "filter_size": 20,
                     "pooling_size": 15,
                     "pooling_stride": 10,
                     "dropout": 0.5,
                     "dense_layer_size": 512,
                     "lstm_out": 32,
                     "dilation": 1,
                     "nnodes": (context_window_len+window_len)//resolution,
                     "out_features": 32
                    }

# dataloader threads
data_loader_num_workers = 4



# INTERNAL PARAMETERS (DO NOT NEED TO MODIFY)

# number of 100 bp bins 
nbins = (context_window_len + window_len)//100

exp_path = f"{out_path}/{exp_name}"
data_path = f"{exp_path}/{training_data_dir_name}"
train_out_path = f"{exp_path}/{train_out_dir_name}"
test_out_path = f"{train_out_path}/{test_result_dir_name}"

train_data_paths_seq = {"bed_file_training_df": f"{data_path}/training_df_seq.bed"}
    
train_data_paths_bimodal = {"bed_file_bound_sample_all_df": f"{data_path}/training_df_bimodal_bound.bed",
                            "bed_file_unbound_genome_df": f"{data_path}/training_df_bimodal_unbound.bed"
                           }

val_data_path = f"{data_path}/data_val.bed"
internal_test_data_path = f"{data_path}/test_df_internal.bed"
external_test_data_path = f"{data_path}/test_df_external.bed"

config_file_path = "config.py"

{'dense_layers': 3, 'n_filters': 240, 'filter_size': 20, 'pooling_size': 15, 'pooling_stride': 10, 'dropout': 0.5, 'dense_layer_size': 512, 'lstm_out': 32, 'dilation': 1, 'nnodes': 26, 'out_features': 32}
model_seq_path = ../output/experiment_name/train_out/seqnet/best_seq_model_epoch_1_val_loss_0.27.pt
model_sc_path = ../output/experiment_name/train_out/bimodal/best_bimodal_model_epoch_1_train_loss_batch_avg_0.57.pt
####################
../output/experiment_name/train_out/seqnet/best_seq_model_epoch_1_val_loss_0.27.pt
####################
init - bimodal_network_GAT
Proxy(getattr_1)
Proxy(getattr_2)
Proxy(getattr_3)
Proxy(getattr_4)
Proxy(getattr_1)
Proxy(getattr_2)
Proxy(getattr_3)
Proxy(getattr_4)
test_df_internal
(186, 5)
label
0    149
1     37
Name: count, dtype: int64
  Data size = 186
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs000000010042980800000146'
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000001201d698000000144'
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs000000014076031600000145'
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:81: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  kernel_self = nn.Parameter(self.kernel_initializer(torch.empty(self.F, self.F_)))
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:82: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  kernel_neighs = nn.Parameter(self.kernel_initializer(torch.empty(self.F, self.F_)))
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:89: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  attn_kernel_self = nn.Parameter(self.attn_kernel_initializer(torch.empty(self.F_, 1)))
/data/lab/siddharth/projects/bichrom_new/bichrom_GAT_scripts/code/seq_and_bimodal_networks_ResNet.py:90: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.
  attn_kernel_neighs = nn.Parameter(self.attn_kernel_initializer(torch.empty(self.F_, 1)))
Batch = 0
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 1
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 2
  Forward - bimodal_network_GAT
torch.Size([58, 64, 104])
torch.Size([58, 128, 26])
torch.Size([58, 26, 26])
####################
torch.Size([58, 26, 128])
GAT output shape = torch.Size([58, 128, 26])
torch.Size([58, 1, 1])
GAT output shape = torch.Size([58, 1])
  h = torch.Size([58, 64, 104])
  adj = torch.Size([58, 26, 26])
  xc = torch.Size([58, 1])

--> Predict test-set performance of best models
  ../output/experiment_name/training_data/test_df_external.bed
# Number of Epochs
EPOCHS = 2

# batch size
batchsize = 64


# Fraction of data to be used to construct training and test set            
frac = 0.005

# stride for generating onehot_seq_dict & chip-seq hdf5 file
stride = 50

# prediction region length
window_len = 400

# context around prediction region
context_window_len = 10_000

# stride used for chopping genome during training set construction
chop_genome_stride=50

# number of times to oversample chip-seq (positive) regions in training set
num_oversample_chip_seq_peaks = 5

# output path
out_path = "../output"

# input data path
in_path = "../input/raw_data-Ascl1_12hr_real"

# experiment name (directory with this name will be create in out_path
exp_name="experiment_name"

# training data directory name
training_data_dir_name="training_data"

# train out directory name
train_out_dir_name="train_out"

# test results directory path
test_result_dir_name="test_set_performance"

# path to seq_onehot dictionary
seq_onehot_dict_out_path = f"{out_path}/common_data/onehot_seq_dict"

# path to genome sizes file
info = f"{in_path}/mm10_random_removed.info"

# path to genome fasta file
fa = f"{in_path}/mm10.fa"

# path to chip seq hdf5 file
hdf5_chromatin_tracks_out_path = f"{out_path}/common_data/hdf5_Ascl1"


#chromatin_tracks_path = f"{in_path}"

# path to chip seq bigwig file in the list
chromatin_tracks_path_list =[
    f"{in_path}/Ascl1_R1_R2_R3_rep_avg.bw"
]

# path to MultiGPS .event file
peaks = f"{in_path}/multigps_2023-03-30-05-43-08_ES.events"

# path to blacklist regions .bed file
blacklist = f"{in_path}/mm10_blacklist.bed"

# list training chromosomes
training_chrom_list = ["chr1"]

# list of validation chromosomes
val_chroms = ["chr17"]

# list of test chromosomes
test_chroms = ["chr10"]

# path to cool .file
cool_file_path = f"{in_path}/GSE130275_mESC_WT_combined_1.3B_400_normalized.cool"

# resolution of .cool file
resolution = window_len

# model params (note: you may need to modify model parameters inside seq_and_bimodal_networks_ResNet.py)
model_params_dict = {"dense_layers": 3,
                     "n_filters": 240,
                     "filter_size": 20,
                     "pooling_size": 15,
                     "pooling_stride": 10,
                     "dropout": 0.5,
                     "dense_layer_size": 512,
                     "lstm_out": 32,
                     "dilation": 1,
                     "nnodes": (context_window_len+window_len)//resolution,
                     "out_features": 32
                    }

# dataloader threads
data_loader_num_workers = 4



# INTERNAL PARAMETERS (DO NOT NEED TO MODIFY)

# number of 100 bp bins 
nbins = (context_window_len + window_len)//100

exp_path = f"{out_path}/{exp_name}"
data_path = f"{exp_path}/{training_data_dir_name}"
train_out_path = f"{exp_path}/{train_out_dir_name}"
test_out_path = f"{train_out_path}/{test_result_dir_name}"

train_data_paths_seq = {"bed_file_training_df": f"{data_path}/training_df_seq.bed"}
    
train_data_paths_bimodal = {"bed_file_bound_sample_all_df": f"{data_path}/training_df_bimodal_bound.bed",
                            "bed_file_unbound_genome_df": f"{data_path}/training_df_bimodal_unbound.bed"
                           }

val_data_path = f"{data_path}/data_val.bed"
internal_test_data_path = f"{data_path}/test_df_internal.bed"
external_test_data_path = f"{data_path}/test_df_external.bed"

config_file_path = "config.py"

{'dense_layers': 3, 'n_filters': 240, 'filter_size': 20, 'pooling_size': 15, 'pooling_stride': 10, 'dropout': 0.5, 'dense_layer_size': 512, 'lstm_out': 32, 'dilation': 1, 'nnodes': 26, 'out_features': 32}
model_seq_path = ../output/experiment_name/train_out/seqnet/best_seq_model_epoch_1_val_loss_0.27.pt
model_sc_path = ../output/experiment_name/train_out/bimodal/best_bimodal_model_epoch_1_train_loss_batch_avg_0.57.pt
####################
../output/experiment_name/train_out/seqnet/best_seq_model_epoch_1_val_loss_0.27.pt
####################
init - bimodal_network_GAT
Proxy(getattr_1)
Proxy(getattr_2)
Proxy(getattr_3)
Proxy(getattr_4)
Proxy(getattr_1)
Proxy(getattr_2)
Proxy(getattr_3)
Proxy(getattr_4)
test_df_external
(653, 5)
label
0    651
1      2
Name: count, dtype: int64
  Data size = 653
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000001c0112ff80000014a'
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000001802e5be300000148'
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs00000001a0316c9c00000147'
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
Traceback (most recent call last):
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 300, in _run_finalizers
    finalizer()
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/multiprocessing/util.py", line 133, in _remove_temp_dir
    rmtree(tempdir)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 734, in rmtree
    _rmtree_safe_fd(fd, path, onerror)
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 690, in _rmtree_safe_fd
    onerror(os.unlink, fullname, sys.exc_info())
  File "/home/spg5958/group/lab/siddharth/software/miniforge3/envs/pytorch_bichrom/lib/python3.9/shutil.py", line 688, in _rmtree_safe_fd
    os.unlink(entry.name, dir_fd=topfd)
OSError: [Errno 16] Device or resource busy: '.nfs000000016071d5cd00000149'
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
DONE
Batch = 0
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 1
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 2
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 3
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 4
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 5
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 6
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 7
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 8
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 9
  Forward - bimodal_network_GAT
torch.Size([64, 64, 104])
torch.Size([64, 128, 26])
torch.Size([64, 26, 26])
####################
torch.Size([64, 26, 128])
GAT output shape = torch.Size([64, 128, 26])
torch.Size([64, 1, 1])
GAT output shape = torch.Size([64, 1])
  h = torch.Size([64, 64, 104])
  adj = torch.Size([64, 26, 26])
  xc = torch.Size([64, 1])
Batch = 10
  Forward - bimodal_network_GAT
torch.Size([13, 64, 104])
torch.Size([13, 128, 26])
torch.Size([13, 26, 26])
####################
torch.Size([13, 26, 128])
GAT output shape = torch.Size([13, 128, 26])
torch.Size([13, 1, 1])
GAT output shape = torch.Size([13, 1])
  h = torch.Size([13, 64, 104])
  adj = torch.Size([13, 26, 26])
  xc = torch.Size([13, 1])

Elapsed(trainNN.sh): 0hrs 5min 21sec
